<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>thuxuxs</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://thuxuxs.github.io/"/>
  <updated>2016-12-09T17:37:36.000Z</updated>
  <id>http://thuxuxs.github.io/</id>
  
  <author>
    <name>Xusheng Xu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>双腔耦合</title>
    <link href="http://thuxuxs.github.io/2016/12/09/%E5%8F%8C%E8%85%94%E8%80%A6%E5%90%88/"/>
    <id>http://thuxuxs.github.io/2016/12/09/双腔耦合/</id>
    <published>2016-12-09T17:37:21.000Z</published>
    <updated>2016-12-09T17:37:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="双腔耦合"><a href="#双腔耦合" class="headerlink" title="双腔耦合"></a>双腔耦合</h1><p>$$H=\hbar \omega_1a_1^\dagger a_1+\hbar \omega_2 a^\dagger_2 a_2+\hbar g(a_1^\dagger a_2 +a_1 a_2^\dagger)+i\hbar \sqrt{\kappa_{1,ex}}s_{in}(a_1^\dagger e^{-i\omega_l t}-a_1 e^{i\omega_l t})$$<br>选择变换$U=\exp(i\omega_l a_1^\dagger a t+i\omega_l a_2^\dagger a_2 t)$<br>得到新哈密顿量为<br>$$H=-\hbar \Delta_1 a_1^\dagger a_1-\hbar \Delta_2 a^\dagger_2 a_2+\hbar g(a_1^\dagger a_2+a_1 a_2^\dagger)+i\hbar \sqrt{\kappa_{ex,1}}s_{in}(a_1^\dagger-a_1)$$<br>其中$\Delta_1=\omega_l-\omega_1,\Delta_2=\omega_l-\omega_2$，写出运动方程<br>$$<br>\begin{aligned}<br>\frac{da_1}{dt}&amp;=i\Delta_1a_1-\frac{\kappa_1}{2}a_1-iga_2+\sqrt{\kappa_{ex,1}}s_{in}\\<br>\frac{da_2}{dt}&amp;=i\Delta_2 a_2-\frac{\kappa_2}{2}a_2-iga_1<br>\end{aligned}<br>$$<br>在稳态下即个导数为零的时候求解方程，得到<br>$$<br>\begin{aligned}<br>&amp;\left(\Delta_1+i\frac{\kappa_1}{2}\right)a_1-ga_2=i\sqrt{\kappa_{ex,1}}s_{in}\\<br>&amp;\left(\Delta_2+i\frac{\kappa_2}{2}\right)a_2-ga_1=0<br>\end{aligned}$$<br>解得<br>$$<br>a_1=\frac{2is_{in}\sqrt{\kappa_{ex,1}}}{(2\Delta_1+i\kappa_1)-\frac{4g^2}{2\Delta_2+i\kappa_2}}<br>$$<br>计算输出谱<br>$$<br>\begin{aligned}<br>t&amp;=\frac{s_{out}}{s_{in}}\\<br>&amp;=\frac{s_{in}-\sqrt{\kappa_{ex,1}}a_1}{s_{in}}\\<br>&amp;=1-\frac{2i\kappa_{ex,1}}{(2\Delta_1+i\kappa_1)-\frac{4g^2}{2\Delta_2+i\kappa_2}}\\<br>&amp;=1-\frac{1}{(\frac{\kappa_1}{2\kappa_{ex,1}}-i\frac{\Delta_1}{\kappa_{ex,1}})+\frac{g^2/\kappa_{ex,1}^2}{\frac{\kappa_2}{2\kappa_{ex,1}}-i\frac{\Delta_2}{\kappa_{ex,1}}}}<br>\end{aligned}<br>$$</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;双腔耦合&quot;&gt;&lt;a href=&quot;#双腔耦合&quot; class=&quot;headerlink&quot; title=&quot;双腔耦合&quot;&gt;&lt;/a&gt;双腔耦合&lt;/h1&gt;&lt;p&gt;$$H=\hbar \omega_1a_1^\dagger a_1+\hbar \omega_2 a^\dagger_2 a
    
    </summary>
    
    
      <category term="Physic" scheme="http://thuxuxs.github.io/tags/Physic/"/>
    
  </entry>
  
  <entry>
    <title>理解Python中的with...as...语法[转载]</title>
    <link href="http://thuxuxs.github.io/2016/12/07/%E7%90%86%E8%A7%A3Python%E4%B8%AD%E7%9A%84with-as-%E8%AF%AD%E6%B3%95-%E8%BD%AC%E8%BD%BD/"/>
    <id>http://thuxuxs.github.io/2016/12/07/理解Python中的with-as-语法-转载/</id>
    <published>2016-12-08T06:57:10.000Z</published>
    <updated>2016-12-08T07:08:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文转载自<a href="http://zhoutall.com/archives/325" target="_blank" rel="external">http://zhoutall.com/archives/325</a><br><a id="more"></a></p>
<p>使用语言的好特性，而不是那些糟糕的特性————不知道谁说的</p>
<p>好久不学习 python 的语法了，上次去面试，和面试官聊到了 python 中的 with-as statement（也称 context manager），挺感兴趣的，这两天学习了一番，收获颇丰在此分享。</p>
<p>先说明一个常见问题，文件打开：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    f = open(<span class="string">'xxx'</span>)</div><div class="line">    do something</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    do something</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    f.close()</div></pre></td></tr></table></figure></p>
<p>其实我个人不止一次在网上看到有这么写的了，这个是错的。<br>首先正确的如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    f = open(<span class="string">'xxx'</span>)</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'fail to open'</span></div><div class="line">    exit(<span class="number">-1</span>)</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    do something</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    do something</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    f.close()</div></pre></td></tr></table></figure></p>
<p>很麻烦不是么，但正确的方法就是这么写。<br>我们为什么要写 finally，是因为防止程序抛出异常最后不能关闭文件，但是需要关闭文件有一个前提就是文件已经打开了。<br>在第一段错误代码中，如果异常发生在 f=open(‘xxx’) 的时候，比如文件不存在，立马就可以知道执行 f.close() 是没有意义的。改正后的解决方案就是第二段代码。</p>
<p>好了言归正转，开始讨论 with 语法。</p>
<p>首先我们从下面这个问题谈起，try-finally 的语法结构：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">set things up</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    do something</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    tear things down</div></pre></td></tr></table></figure></p>
<p>这东西是个常见结构，比如文件打开，set things up就表示f=open(‘xxx’)，tear things down就表示f.close()。在比如像多线程锁，资源请求，最终都有一个释放的需求。Try…finally 结构保证了 tear things down 这一段永远都会执行，即使上面 do something 得工作没有完全执行。</p>
<p>如果经常用这种结构，我们首先可以采取一个较为优雅的办法，封装！<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">controlled_execution</span><span class="params">(callback)</span>:</span></div><div class="line">    set things up</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        callback(thing)</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        tear things down</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_function</span><span class="params">(thing)</span>:</span></div><div class="line">    do something</div><div class="line"></div><div class="line">controlled_execution(my_function)</div></pre></td></tr></table></figure></p>
<p>封装是一个支持代码重用的好办法，但是这个办法很 dirty，特别是当 do something 中有修改一些 local variables 的时候（变成函数调用，少不了带来变量作用域上的麻烦）。</p>
<p>另一个办法是使用生成器，但是只需要生成一次数据，我们用 for-in 结构去调用他：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">controlled_execution</span><span class="params">()</span>:</span></div><div class="line">    set things up</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">yield</span> thing</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        tear things down</div><div class="line"></div><div class="line"><span class="keyword">for</span> thing <span class="keyword">in</span> controlled_execution():</div><div class="line">    do something <span class="keyword">with</span> thing</div></pre></td></tr></table></figure></p>
<p>因为 thing 只有一个，所以 yield 语句只需要执行一次。当然，从代码可读性也就是优雅的角度来说这简直是糟糕透了。我们在确定 for 循环只执行一次的情况下依然使用了 for 循环，这代码给不知道的人看一定很难理解这里的循环是什么个道理。</p>
<p>最终的 python-dev 团队的解决方案。（python 2.5 以后增加了 with 表达式的语法）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">controlled_execution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></div><div class="line">        set things up</div><div class="line">        <span class="keyword">return</span> thing</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, type, value, traceback)</span>:</span></div><div class="line">        tear things down</div><div class="line"></div><div class="line"><span class="keyword">with</span> controlled_execution() <span class="keyword">as</span> thing:</div><div class="line">        do something</div></pre></td></tr></table></figure></p>
<p>在这里，python 使用了 with-as 的语法。当 python 执行这一句时，会调用__enter__函数，然后把该函数 return 的值传给 as 后指定的变量。之后，python 会执行下面 do something 的语句块。最后不论在该语句块出现了什么异常，都会在离开时执行__exit__。<br>另外，__exit__除了用于 tear things down，还可以进行异常的监控和处理，注意后几个参数。要跳过一个异常，只需要返回该函数 True 即可。下面的样例代码跳过了所有的 TypeError，而让其他异常正常抛出。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, type, value, traceback)</span>:</span></div><div class="line">    <span class="keyword">return</span> isinstance(value, TypeError)</div></pre></td></tr></table></figure></p>
<p>在 python2.5 及以后，file 对象已经写好了__enter__和__exit__函数，我们可以这样测试：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">"x.txt"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f</div><div class="line">&lt;open file <span class="string">'x.txt'</span>, mode <span class="string">'r'</span> at <span class="number">0x00AE82F0</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.__enter__()</div><div class="line">&lt;open file <span class="string">'x.txt'</span>, mode <span class="string">'r'</span> at <span class="number">0x00AE82F0</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.read(<span class="number">1</span>)</div><div class="line"><span class="string">'X'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.__exit__(<span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.read(<span class="number">1</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">    File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">ValueError: I/O operation on closed file</div></pre></td></tr></table></figure></p>
<p>之后，我们如果要打开文件并保证最后关闭他，只需要这么做：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">"x.txt"</span>) <span class="keyword">as</span> f:</div><div class="line">    data = f.read()</div><div class="line">    do something <span class="keyword">with</span> data</div></pre></td></tr></table></figure></p>
<p>如果有多个项，我们可以这么写：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">"x.txt"</span>) <span class="keyword">as</span> f1, open(<span class="string">'xxx.txt'</span>) <span class="keyword">as</span> f2:</div><div class="line">    do something <span class="keyword">with</span> f1,f2</div></pre></td></tr></table></figure></p>
<p>上文说了__exit__函数可以进行部分异常的处理，如果我们不在这个函数中处理异常，他会正常抛出，这时候我们可以这样写（python 2.7 及以上版本，之前的版本参考使用 contextlib.nested 这个库函数）：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">with</span> open( <span class="string">"a.txt"</span> ) <span class="keyword">as</span> f :</div><div class="line">        do something</div><div class="line"><span class="keyword">except</span> xxxError:</div><div class="line">    do something about exception</div></pre></td></tr></table></figure></p>
<p>总之，with-as 表达式极大的简化了每次写 finally 的工作，这对保持代码的优雅性是有极大帮助的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文转载自&lt;a href=&quot;http://zhoutall.com/archives/325&quot;&gt;http://zhoutall.com/archives/325&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://thuxuxs.github.io/tags/Python/"/>
    
      <category term="zz" scheme="http://thuxuxs.github.io/tags/zz/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning算法</title>
    <link href="http://thuxuxs.github.io/2016/12/05/Machine-Learning%E7%AE%97%E6%B3%95/"/>
    <id>http://thuxuxs.github.io/2016/12/05/Machine-Learning算法/</id>
    <published>2016-12-06T06:57:45.000Z</published>
    <updated>2016-12-06T07:00:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里做个总结，对每个算法单独写<br><a id="more"></a></p>
<ul>
<li>线性回归</li>
<li>逻辑回归</li>
<li>决策树</li>
<li>支持向量机</li>
<li>朴素贝叶斯</li>
<li>KNN算法</li>
<li>K平均数算法</li>
<li>随机森林</li>
<li>将维算法</li>
<li>Adaboost算法</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里做个总结，对每个算法单独写&lt;br&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://thuxuxs.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Python类的内置函数</title>
    <link href="http://thuxuxs.github.io/2016/12/05/Python%E7%B1%BB%E7%9A%84%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/"/>
    <id>http://thuxuxs.github.io/2016/12/05/Python类的内置函数/</id>
    <published>2016-12-06T06:18:42.000Z</published>
    <updated>2016-12-07T06:11:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>文本将介绍一些<code>Python</code>类中的一些内部函数，他们的名字叫做<code>Magic Method</code><br><a id="more"></a></p>
<h1 id="代码先行"><a href="#代码先行" class="headerlink" title="代码先行"></a>代码先行</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> traceback</div><div class="line"><span class="keyword">import</span> inspect</div><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> total_ordering</div><div class="line"></div><div class="line"><span class="meta">@total_ordering</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">home</span><span class="params">(object)</span>:</span></div><div class="line">    total_item=[]</div><div class="line">    num=<span class="number">0</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></div><div class="line">        self.name=name</div><div class="line">        self.myitem=[]</div><div class="line">        <span class="comment"># print sys._getframe().f_code.co_name</span></div><div class="line">        <span class="comment"># print traceback.extract_stack()</span></div><div class="line">        <span class="comment"># print inspect.getframeinfo(inspect.currentframe().f_back)</span></div><div class="line">        self.instance_name=traceback.extract_stack()[<span class="number">0</span>][<span class="number">-1</span>].split(<span class="string">'='</span>)[<span class="number">0</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_item</span><span class="params">(self,item)</span>:</span></div><div class="line">        home.total_item.append(item)</div><div class="line">        self.myitem.append(item)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">my_num</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> self.name+<span class="string">' has '</span>+str(len(self.myitem))+<span class="string">' items'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">my_what</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> len(self.myitem)==<span class="number">0</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'Nothing'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> self.myitem:</div><div class="line">                <span class="keyword">print</span> i,</div><div class="line">            <span class="keyword">print</span> <span class="string">'\n'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">who</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> len(self.myitem)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self,name)</span>:</span></div><div class="line">        <span class="keyword">if</span> name==<span class="string">'name'</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'&lt;you have called '</span>+object.__getattribute__(self,name)+<span class="string">'&gt;'</span></div><div class="line">        <span class="keyword">return</span> object.__getattribute__(self,name)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__gt__</span><span class="params">(self,other)</span>:</span></div><div class="line">        <span class="keyword">if</span> len(self)&gt;len(other):</div><div class="line">            <span class="keyword">print</span> <span class="string">'you stupid '</span>+self.name+<span class="string">', you buy the most thing'</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">elif</span> len(self)&lt;len(other):</div><div class="line">            <span class="keyword">print</span> <span class="string">'you stupid '</span>+other.name+<span class="string">', you buy the most thing'</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> self.__eq__(other)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self,other)</span>:</span></div><div class="line">        <span class="keyword">if</span> len(self)==len(other):</div><div class="line">            <span class="keyword">print</span> <span class="string">'you guys buy the same'</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.__gt__(other)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self,name,value)</span>:</span></div><div class="line">        <span class="keyword">if</span> name==<span class="string">'ex'</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'you don\'t need a ex'</span></div><div class="line">        <span class="keyword">elif</span> name==<span class="string">'current'</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'right, you can set a current value, which is '</span>+value</div><div class="line">            self.__dict__[name]=value</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.__dict__[name]=value</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'hey, i am '</span>+self.name</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        self._index=<span class="number">0</span></div><div class="line">        <span class="keyword">return</span> self</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self._index&lt;len(self.myitem):</div><div class="line">            self._index+=<span class="number">1</span></div><div class="line">            <span class="keyword">return</span> self.myitem[self._index<span class="number">-1</span>]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">raise</span> StopIteration</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">num</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'total item: '</span>,len(home.total_item)</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">what</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">if</span> len(home.total_item)==<span class="number">0</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'No item yet'</span></div><div class="line">        <span class="keyword">elif</span> len(home.total_item)==<span class="number">1</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'only one item: '</span>,home.total_item[<span class="number">0</span>]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">print</span> <span class="string">'items are: '</span>,</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> home.total_item:</div><div class="line">                <span class="keyword">print</span> i,<span class="string">','</span>,</div><div class="line">            <span class="keyword">print</span> <span class="string">'\n'</span></div><div class="line"></div><div class="line">woman=home(<span class="string">'may'</span>)</div><div class="line">man=home(<span class="string">'xuxs'</span>)</div><div class="line">woman.add_item(<span class="string">'watch'</span>)</div><div class="line">woman.add_item(<span class="string">'bag'</span>)</div><div class="line">woman.add_item(<span class="string">'lip_stick'</span>)</div><div class="line">man.add_item(<span class="string">'phone'</span>)</div><div class="line">man.add_item(<span class="string">'apple'</span>)</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'How many items that we bought together?'</span></div><div class="line">home.num()</div><div class="line"><span class="keyword">print</span> <span class="string">'What are they'</span></div><div class="line">home.what()</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'The name of the woman is '</span>, woman.who()</div><div class="line"><span class="keyword">print</span> <span class="string">'The woman has bought '</span>,len(woman),<span class="string">' items, which are below'</span></div><div class="line">man.my_what()</div><div class="line"><span class="keyword">print</span> <span class="string">'Let us check who bought more'</span></div><div class="line"><span class="keyword">print</span> man&lt;woman</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'this class is iterable, the output below is under list(man)'</span></div><div class="line"><span class="keyword">print</span> list(man)</div><div class="line"><span class="keyword">print</span> <span class="string">'and iter it again'</span></div><div class="line"><span class="keyword">print</span> list(man)</div><div class="line"></div><div class="line">man.ex=<span class="string">'XXX'</span></div><div class="line">man.current=<span class="string">'may'</span></div><div class="line"><span class="keyword">print</span> man.current</div><div class="line"><span class="keyword">print</span> man</div></pre></td></tr></table></figure>
<p>运行的输出如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">total item:  5</div><div class="line">items are:  watch , bag , lip_stick , phone , apple ,</div><div class="line"></div><div class="line">&lt;you have called may&gt;</div><div class="line">3</div><div class="line">phone apple</div><div class="line"></div><div class="line">&lt;you have called may&gt;</div><div class="line">you stupid may, you buy the most thing</div><div class="line">&lt;you have called may&gt;</div><div class="line">you stupid may, you buy the most thing</div><div class="line">True</div><div class="line">children</div><div class="line">this class is iterable</div><div class="line">[&apos;phone&apos;, &apos;apple&apos;]</div><div class="line">and iter it again</div><div class="line">[&apos;phone&apos;, &apos;apple&apos;]</div><div class="line">you don&apos;t need a ex</div><div class="line">right, you can set a current value, which is may</div><div class="line">may</div><div class="line">&lt;you have called xuxs&gt;</div><div class="line">hey, i am xuxs</div></pre></td></tr></table></figure></p>
<h1 id="步步为营"><a href="#步步为营" class="headerlink" title="步步为营"></a>步步为营</h1><p>这段代码包含的东西比较杂，但是大部分的还是很有用，下面是对这里用到的知识点的总结和提炼，以代码为准绳，步步为营。<strong>这段代码主要是在讲两个人去买东西，他们都是类<code>home</code>的实例，只不过一个是家里的男人，一个是家里的女人。他们要各自记住自己买了什么东西，同时作为一个家庭，他们也要知道一共买了多少东西，两个人之间还需要比较一下，提纲挈领的大概就是这么回事。但是中间穿插了很多知识点，在以后的实际开发中可能会用到。</strong></p>
<h2 id="构造函数-init"><a href="#构造函数-init" class="headerlink" title="构造函数 __init__"></a>构造函数 <code>__init__</code></h2><p>这是我们接触到的第一个<code>Magic Method</code>，有名字可知，其是一个初始化函数，在类实例化的时候首先自动运行的一个函数（严格来说不是第一个）。举个栗子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">One</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,par=None)</span>:</span></div><div class="line">    <span class="keyword">if</span> par == <span class="keyword">None</span>:</div><div class="line">      <span class="keyword">print</span> <span class="string">'No parameter'</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">      <span class="keyword">print</span> <span class="string">'Follow me:'</span>,par</div><div class="line"></div><div class="line">one1=One()</div><div class="line">one2=One(<span class="string">'Houa!'</span>)</div><div class="line"></div><div class="line"><span class="comment">##output</span></div><div class="line"><span class="comment">#&gt;&gt;&gt;No parameter</span></div><div class="line"><span class="comment">#&gt;&gt;&gt;Follow me: Houa!</span></div></pre></td></tr></table></figure></p>
<p>从输出结果我们看出，在示例化对象一时，自动调用了类里面的<code>__init__</code>函数，由于这里我们没有传入参数，所以直接输出<code>No parameter</code>。需要额外注意的是，在这个<code>__init__</code>函数里，我们使用了默认参数的用法，<code>par=None</code>，这是函数定义时经常使用的，表示我们不传入该参数时，该参数使用的默认值就是定义时所给定的这个<code>None</code>，当然我们也可以<code>None</code>设为我们想设的其他值。我们示例化对象<code>one2</code>时，我们传入了参数，所以自动调用<code>__init__</code>并输出了<code>Parameter is Houa!</code></p>
<h2 id="全局变量和静态方法"><a href="#全局变量和静态方法" class="headerlink" title="全局变量和静态方法"></a>全局变量和静态方法</h2><p>如代码中的第8、9行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">total_item=[]</div><div class="line">num=<span class="number">0</span></div></pre></td></tr></table></figure></p>
<p>我们在类的初始化方法（后面介绍）<code>__init__</code>之前定义了两个变量<code>total_item</code>和<code>num</code>分别表示整个家庭所购买的物品和总数，这两个变量在实例化后不同的对象访问都是允许的，且不同的对象内部的这些全局变量都是公共使用的，举个简单的栗子来说<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Two</span>:</span></div><div class="line">  a=<span class="number">0</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">    Two.a=Two.a+<span class="number">1</span></div><div class="line">    <span class="keyword">print</span> Two.a</div><div class="line">two1=Two()</div><div class="line">two2=Two()</div><div class="line">Two()</div><div class="line">two1.a=<span class="number">0</span></div><div class="line">Two()</div><div class="line"></div><div class="line"><span class="comment">##output</span></div><div class="line"><span class="comment">#&gt;&gt;&gt;1</span></div><div class="line"><span class="comment">#&gt;&gt;&gt;2</span></div><div class="line"><span class="comment">#&gt;&gt;&gt;3</span></div><div class="line"><span class="comment">#&gt;&gt;&gt;4</span></div></pre></td></tr></table></figure></p>
<p>切记，在类内部使用这些变量时，要在变量前写上类名，如<code>Two.a</code>，由结果可知，各个对象之间没有什么关联，但是类全局变量<code>a</code>在不同的对象里却是同一个变量，所以才会出现上面的累加效果。但是，我们发现，当我们在类的外部使用像<code>two1.a=0</code>这样的语句来修改这个全局变量时，并没有成功，最有一个<code>Two()</code>输出的<code>4</code>。所以这里我们使用<strong>静态方法</strong>来实现，但这不是必须的，首先看栗子，我们在上面的类中加入静态方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Two</span>:</span></div><div class="line">  a=<span class="number">0</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">    Two.a=Two.a+<span class="number">1</span></div><div class="line">    <span class="keyword">print</span> Two.a</div><div class="line"></div><div class="line"><span class="meta">  @staticmethod</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">set_a</span><span class="params">(a)</span>:</span></div><div class="line">      Two.a=a</div><div class="line">      <span class="keyword">print</span> Two.a</div><div class="line"></div><div class="line">two1=Two()</div><div class="line">Two()</div><div class="line">two1.set_a(<span class="number">10</span>)</div><div class="line">Two.set_a(<span class="number">100</span>)</div><div class="line"><span class="keyword">print</span> two1.a</div><div class="line"></div><div class="line"><span class="comment">##output</span></div><div class="line"><span class="comment">#&gt;&gt;&gt;1</span></div><div class="line"><span class="comment">#&gt;&gt;&gt;2</span></div><div class="line"><span class="comment">#&gt;&gt;&gt;10</span></div><div class="line"><span class="comment">#&gt;&gt;&gt;100</span></div><div class="line"><span class="comment">#&gt;&gt;&gt;100</span></div></pre></td></tr></table></figure></p>
<p>静态方法由<code>@staticmethod</code>来修饰，即加在所定义的方法前面，在这里使用静态方法的好处是，我们可以直接使用<code>类名.静态方法</code>的方式来调用，当然<code>对象名.静态方法</code>也能调用，但是对于对象的方法就不能使用<code>类名.方法</code>来调用了。</p>
<h2 id="长度函数-len"><a href="#长度函数-len" class="headerlink" title="长度函数 __len__"></a>长度函数 <code>__len__</code></h2><p>定义此函数后我们就知道度量长度的内置函数<code>len()</code>作用在这个对象上式什么意思啦，比如在这里我们是想测量此对象买了多少东西，所以，入代码中的37、38行所定义<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> len(self.myitem)</div></pre></td></tr></table></figure></p>
<p>那么在后面测试中，直接可以使用<code>print len(man)</code>来打印这个家里的男人买了多少东西，这里输出为<code>2</code>。简单的测试样例如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Three</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data=[])</span>:</span></div><div class="line">    self.data=data</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'you involved __len__'</span></div><div class="line">    <span class="keyword">return</span> len(self.data)</div><div class="line"></div><div class="line">three=Three([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</div><div class="line"><span class="keyword">print</span> len(three)</div><div class="line"></div><div class="line"><span class="comment">##output</span></div><div class="line"><span class="comment">#&gt;&gt;&gt;you involved __len__</span></div><div class="line"><span class="comment">#&gt;&gt;&gt;3</span></div></pre></td></tr></table></figure></p>
<h2 id="调用属性函数-getattribute"><a href="#调用属性函数-getattribute" class="headerlink" title="调用属性函数 __getattribute__"></a>调用属性函数 <code>__getattribute__</code></h2><p>这个函数是在类的属性，如变量、函数等等被调用时都会自动运行的一个函数，其中传入的参数为这个属性的名称。此函数是Python新类才引入的，所以在定义类时要继承基类<code>object</code>，这方面知识超出本文范围，请大家自行<a href="https://www.google.com.hk/#newwindow=0&amp;safe=strict&amp;q=python+object" target="_blank" rel="external">谷歌</a> $\leftarrow$点一下就可以哦。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self,attr)</span>:</span></div><div class="line">      <span class="keyword">if</span> attr==<span class="string">'name'</span>:</div><div class="line">          <span class="keyword">print</span> <span class="string">'&lt;you have called '</span>+object.__getattribute__(self,attr)+<span class="string">'&gt;'</span></div><div class="line">      <span class="keyword">return</span> object.__getattribute__(self,attr)</div></pre></td></tr></table></figure></p>
<p>如上代码段，我们简单实现了当类里面的<code>name</code>这个变量被调用时就打印<code>&lt;you have called XXX&gt;</code>这样一个功能，虽然并没有什么卵用。为了防止循环调用，我们需要使用<code>object.__getattribute__(self,attr)</code>这种形式来调用这些变量。</p>
<h2 id="比较函数-gt-和-eq"><a href="#比较函数-gt-和-eq" class="headerlink" title="比较函数 __gt__和__eq__"></a>比较函数 <code>__gt__</code>和<code>__eq__</code></h2><p>这两个分别是大于和等于的比较，主要是实现当两个对象直接使用大于号<code>&gt;</code>和等于号<code>==</code>进行比较时会产生什么效果，当然还有<code>&lt;,&lt;=,&gt;=,!=</code>这些都可以定义，在这里就省略啦！当定义完成之后我们就可以直接来比较对象了，在上述代码中我们想比较谁买的东西多，所以比较的内容就是个子所买东西的数量，直接引用<code>print man&lt;woman</code>，输出结果则为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;&lt;you have called may&gt;</div><div class="line">&gt;&gt;&gt;you stupid may, you buy the most thing</div><div class="line">&gt;&gt;&gt;True</div></pre></td></tr></table></figure></p>
<p>第一行输出是因为我们调用了<code>self.name</code>来打印谁买的多，从而触发了<code>__getattribute__</code>函数而产生的，第二行输出是比较函数内部输出，第三行是打印返回值。</p>
<h2 id="这是属性函数-setattr"><a href="#这是属性函数-setattr" class="headerlink" title="这是属性函数 __setattr__"></a>这是属性函数 <code>__setattr__</code></h2><p>这个函数在设置类的变量的值是自定调用，比如说实例化对象时，我们要定义<code>self.name=name</code>，这里改变了变量的值，所以就会触发此函数，这个函数有变量名和变量的值两个输入参数。利用这一特性我们可以控制哪些值可以更改那些不可以（其他功能大家自己脑洞开发），具体代码段如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self,name,value)</span>:</span></div><div class="line">      <span class="keyword">if</span> name==<span class="string">'ex'</span>:</div><div class="line">          <span class="keyword">print</span> <span class="string">'you don\'t need a ex'</span></div><div class="line">      <span class="keyword">elif</span> name==<span class="string">'current'</span>:</div><div class="line">          <span class="keyword">print</span> <span class="string">'right, you can set a current value, which is '</span>+value</div><div class="line">          self.__dict__[name]=value</div><div class="line">      <span class="keyword">else</span>:</div><div class="line">          self.__dict__[name]=value</div></pre></td></tr></table></figure></p>
<p>从这里我们可以看出，当我们要设置<code>ex</code>这个变量是，是不被允许的，直接打印出你不能有<code>ex</code>，当然设置<code>current</code>是被允许的，这就实现了你能有<code>current</code>不能有<code>ex</code>。对于其他不需要考虑的变量，我们直接将其加入类内部的变量字典里，以供使用，具体就是<code>self.__dict__[name]=value</code></p>
<h2 id="对象的字符串表达式-str"><a href="#对象的字符串表达式-str" class="headerlink" title="对象的字符串表达式 __str__"></a>对象的字符串表达式 <code>__str__</code></h2><p>在没有定义此函数的情况下，当我们打印一个对象时，输出的可能是这个对象的地址，如<code>&lt;__main__.Three instance at 0x104c622d8&gt;</code>，但是有的时候我们不想要打印这个地址而是其他一些信息，那么我们只要定义这个函数即可。如下代码段<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'hey, i am '</span>+self.name</div></pre></td></tr></table></figure></p>
<p>那么当你打印女人这个对象时<code>print woman</code>，就会输出<code>hey, i am  may</code>，是不是很好玩啊。</p>
<h2 id="迭代器-iter"><a href="#迭代器-iter" class="headerlink" title="迭代器 __iter__"></a>迭代器 <code>__iter__</code></h2><p>我们知道Python中<code>for</code>循环用的相当多，而这些所要循环的对象都是可迭代的，如<code>for i in range(100)</code>中的<code>range(100)</code>是一个list，是可迭代的，其实这些都是定义了<code>__iter__</code>和<code>next</code>两个函数实现的（前者返回可迭代的对象，后者定义迭代的下一步要干什么）。对于自定义的类，我们也可以使之成为可迭代的，如我们在这里想使得我们的对象<code>man</code>和<code>woman</code>都是可迭代的，即可以直接拿到循环上去用，那么我们可以定义这两个函数。如下我们要实现直接使用对象名来迭代产生对象所购买的物品<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">      self._index=<span class="number">0</span></div><div class="line">      <span class="keyword">return</span> self</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></div><div class="line">      <span class="keyword">if</span> self._index&lt;len(self.myitem):</div><div class="line">          self._index+=<span class="number">1</span></div><div class="line">          <span class="keyword">return</span> self.myitem[self._index<span class="number">-1</span>]</div><div class="line">      <span class="keyword">else</span>:</div><div class="line">          <span class="keyword">raise</span> StopIteration</div></pre></td></tr></table></figure></p>
<p>其中第二行初始化迭代的位置，<code>next</code>函数告诉我们下一步是返回当前对象的当前<code>_index</code>所对应的物品，当迭代完成就会返回一个迭代到结尾这样一个错误。那么当我们调用如下代码段是就明白为什么有相应的输出了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">'this class is iterable, the output below is under list(man)'</span></div><div class="line"><span class="keyword">print</span> list(man)</div><div class="line"><span class="keyword">print</span> <span class="string">'and iter it again'</span></div><div class="line"><span class="keyword">print</span> list(man)</div><div class="line"></div><div class="line"><span class="comment">##output</span></div><div class="line"><span class="comment">#&gt;&gt;&gt;this class is iterable, the output below is under list(man)</span></div><div class="line"><span class="comment">#&gt;&gt;&gt;['phone', 'apple']</span></div><div class="line"><span class="comment">#&gt;&gt;&gt;and iter it again</span></div><div class="line"><span class="comment">#&gt;&gt;&gt;['phone', 'apple']</span></div></pre></td></tr></table></figure></p>
<p>这了我们直接使用<code>list(man)</code>来产生迭代结果的列表这样一个事实来说明我们的对象可迭代。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我们通过一个两人购物的示例来说明了Python中<code>Magic Method</code>的使用方法，当然这些都是<strong>简单粗暴</strong>的例子，只能起到说明问题的作用，具体的灵活使用还有待在具体实践中来体现。</p>
<blockquote>
<p><em>注：代码中14~17行无关紧要，感兴趣的可以自己学习学习。</em></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文本将介绍一些&lt;code&gt;Python&lt;/code&gt;类中的一些内部函数，他们的名字叫做&lt;code&gt;Magic Method&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://thuxuxs.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>OMIT</title>
    <link href="http://thuxuxs.github.io/2016/12/02/OMIT/"/>
    <id>http://thuxuxs.github.io/2016/12/02/OMIT/</id>
    <published>2016-12-02T21:32:22.000Z</published>
    <updated>2016-12-04T08:42:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>介绍光机械诱导透明(OMIT)</p>
<a id="more"></a>
<h1 id="光机械诱导透明"><a href="#光机械诱导透明" class="headerlink" title="光机械诱导透明"></a>光机械诱导透明</h1><p><a href="http://science.sciencemag.org/content/330/6010/1520" target="_blank" rel="external"><code>Weis S, Rivière R, Deléglise S, et al. Optomechanically induced transparency[J]. Science, 2010, 330(6010): 1520-1523.</code></a></p>
<h2 id="没有泵浦光时的情况"><a href="#没有泵浦光时的情况" class="headerlink" title="没有泵浦光时的情况"></a>没有泵浦光时的情况</h2><p>系统哈密顿量为<br>$$\begin{aligned}<br>H&amp;=\frac{p^2}{2m_{eff}}+\frac{1}{2}m_{eff}\Omega_m^2 x^2+\hbar \omega_0a^\dagger a+\hbar g_0xa^\dagger a\\<br>&amp;+i\hbar \sqrt{\kappa_{ex}}(s_{in}a^\dagger e^{-i\omega_ct}-s_{in}^* ae^{i\omega_ct})<br>\end{aligned}$$</p>
<p>选择变换$U=\exp(i\omega_ca^{\dagger} at)$，得到新的哈密顿量为</p>
<p>$$\begin{aligned}<br>H&amp;=\frac{p^2}{2m_{eff}}+\frac{1}{2}m_{eff}\Omega_m^2 x^2-\hbar \Delta a^\dagger a+\hbar g_0xa^\dagger a\\<br>&amp;+i\hbar \sqrt{\kappa_{ex}}(s_{in}a^\dagger-s_{in}^* a)<br>\end{aligned}$$</p>
<p>这里$\Delta=\omega_c-\omega_0$。写出运动方程（考虑损耗）</p>
<p>$$\frac{da}{dt}=(i(\Delta-g_0x)-\kappa/2)a+\sqrt{\kappa_{ex}}s_{in}$$</p>
<p>$$m_{eff}\frac{d^2x}{dt^2}=-m_{eff}\Omega_m^2x-\hbar g_0a^\dagger a-\Gamma_m m_{eff}\frac{dx}{dt}$$</p>
<p>求得稳态解（各导数为零）为<br>$$\bar a=\frac{\sqrt{\kappa_{ex}}s_{in}}{-i(\Delta-g_0\bar x)+\kappa/2}$$</p>
<p>$$\bar x=-\frac{\hbar g_0|\bar a|^2}{m_{eff}\Omega_m^2}$$</p>
<p>由此可研究稳态解个数的问题，会出现双稳态现象。<br>下面将考虑上面微分方程组在稳态解附近的情况，即假设$a=\bar a+\delta a,x=\bar x+\delta x$<br>所以可以解出小量$\delta a$和$\delta x$的运动方程</p>
<p>$$\begin{aligned}<br>\dot{\delta a}&amp;=(i(\Delta -g_0\bar x)-\kappa/2-ig_0\delta x)(\bar a+\delta a)+\sqrt{\kappa_{ex}}s_{in}\\<br>&amp;=(i(\Delta-g_0\bar x)-\kappa/2)\delta a-ig_0\bar a\delta x\\<br>&amp;=(i\bar \Delta -\kappa/2)\delta a-ig_0\bar a\delta x<br>\end{aligned}$$</p>
<p>$$\begin{aligned}<br>m_{eff}\ddot{\delta x}&amp;=-m_{eff}\Omega_m^2(\bar x+\delta x)-\hbar g_0(\bar a^\dagger +\delta a^\dagger)(\bar a+\delta a)-\Gamma_mm_{eff}\dot{\delta x}\\<br>&amp;=-m_{eff}\Omega_m^2\delta x-\Gamma_mm_{eff}\dot{\delta x}-\hbar g_0 (\delta a \bar a^\dagger + \bar a\delta a^\dagger)<br>\end{aligned}$$</p>
<p>这里$\bar \Delta=\Delta -g_0\bar x$。经由傅里叶变换，转换到频谱中分析<br>$$<br>-i\omega \delta a[\omega]=(i\bar \Delta-\kappa/2)\delta a[\omega]-ig_0\bar a\delta x[\omega]<br>$$<br>$$<br>(-\omega^2 -i\omega\Gamma_m+\Omega_m^2)\delta x[\omega]=-\hbar g_0(\bar a^\dagger \delta a[\omega]+\bar a\delta a[-\omega]^\dagger)/m_{eff}<br>$$<br>从而解出<br>$$<br>\begin{aligned}<br>\delta a[\omega]&amp;=\frac{ig_0\bar a}{i(\bar \Delta -\omega)-\kappa/2}\delta x[\omega]\\<br>\delta a^\dagger[\omega]&amp;=\frac{-ig_0\bar a}{-i(\bar \Delta +\omega)-\kappa/2}\delta x[\omega]\\<br>\end{aligned}<br>$$<br>在机械振动下产生了斯托克斯分量和反斯托克斯分量</p>
<h2 id="有弱的泵浦光参与时的情况"><a href="#有弱的泵浦光参与时的情况" class="headerlink" title="有弱的泵浦光参与时的情况"></a>有弱的泵浦光参与时的情况</h2><p>此时由于有弱泵浦的参与，哈密顿量应该为<br>$$\begin{aligned}<br>H&amp;=\frac{p^2}{2m_{eff}}+\frac{1}{2}m_{eff}\Omega_m^2 x^2+\hbar \omega_0a^\dagger a+\hbar g_0xa^\dagger a\\<br>&amp;+i\hbar \sqrt{\kappa_{ex}}(s_{in} a^\dagger-s_{in}^* a)<br>\end{aligned}$$<br>其中$s_{in}=s_{c}e^{-i\omega_c t}+\delta s_p e^{-i\omega_p t}=(s_c+\delta s_p e^{-i(\omega_p-\omega_c)t})e^{-i\omega_c t}$<br>由于泵浦很弱，我们将$\bar a$和$\bar x$去为刚才没有泵浦是所计算出来的表达式，从而得到新的平衡位置附近的运动方程<br>$$\begin{aligned}<br>\dot{\delta a}&amp;=(i(\Delta -g_0\bar x)-\kappa/2-ig_0\delta x)(\bar a+\delta a)+\sqrt{\kappa_{ex}}\bar s_{in}\\<br>&amp;=(i(\Delta-g_0\bar x)-\kappa/2)\delta a-ig_0\bar a\delta x+\sqrt{\kappa_{ex}}\delta s_p e^{-i(\omega_p-\omega_c)t}\\<br>&amp;=(i\bar \Delta -\kappa/2)\delta a-ig_0\bar a\delta x+\sqrt{\kappa_{ex}}\delta s_p e^{-i\Delta_m t}<br>\end{aligned}$$</p>
<p>$$\begin{aligned}<br>m_{eff}\ddot{\delta x}&amp;=-m_{eff}\Omega_m^2(\bar x+\delta x)-\hbar g_0(\bar a^\dagger +\delta a^\dagger)(\bar a+\delta a)-\Gamma_mm_{eff}\dot{\delta x}\\<br>&amp;=-m_{eff}\Omega_m^2\delta x-\Gamma_mm_{eff}\dot{\delta x}-\hbar g_0 (\delta a \bar a^\dagger + \bar a\delta a^\dagger)<br>\end{aligned}$$<br>为解此方程组，我们假设解的形式为<br>$$<br>\begin{aligned}<br>&amp;\delta a=A^-e^{-i\Delta_m t}+A^+e^{i\Delta_m t}\\<br>&amp;\delta a^\dagger =A^{+\dagger}e^{-i\Delta _m t}+A^{-\dagger}e^{i\Delta_m t}\\<br>&amp;\delta x=X e^{-i\Delta_m t}+X^\dagger e^{i\Delta_m t}<br>\end{aligned}<br>$$<br>由于上式是在控制光中考虑的，而我们要考虑的是泵浦光频率的分量，所以我们只用考虑上式中$A^-$的分量，因为前面方程中的泵浦项的$\delta s_p$的相位为$-i\Delta_m t$。代入运动方程，得到等式<br>$$<br>\begin{aligned}<br>&amp;A^- \left(\kappa/2-i \left(\bar \Delta +\Delta _m\right)\right)=\sqrt{\kappa _{\text{ex}}} \delta s_p-i \bar a g_0 X\\<br>&amp;A^{+\dagger}\left(\kappa/2+i\left(\bar \Delta -\Delta_m\right)\right)=i \bar a^\dagger g_0 X\\<br>&amp;X \left(\Omega _m^2-\Delta _m^2-i \Gamma _m \Delta _m\right)=-\frac{\hbar g_0}{m_{\text{eff}}}\left(\bar a^\dagger A^-+\bar a A^{+\dagger}\right)<br>\end{aligned}$$<br>从而解出<br>$$<br>A^-=\frac{1+if}{\kappa/2-i(\bar \Delta+\Delta_m)+2f\bar \Delta}\sqrt{\kappa_{ex}}\delta s_p<br>$$<br>其中<br>$$<br>\begin{aligned}<br>f&amp;=\frac{\hbar g_0^2|\bar a|^2\chi}{\kappa/2+i(\bar \Delta -\Delta_m)}\\<br>\chi&amp;=\frac{1}{m_{eff}(\Omega_m^2-\Delta_m^2-i\Gamma_m\Delta_m)}<br>\end{aligned}<br>$$</p>
<h2 id="求泵浦光的投射谱"><a href="#求泵浦光的投射谱" class="headerlink" title="求泵浦光的投射谱"></a>求泵浦光的投射谱</h2><p>首先根据输入输出关系$s_{out}=s_{in}-\sqrt{\kappa_{ex}}a$，我们有<br>$$<br>\begin{aligned}<br>s_{out}&amp;=s_c+\delta s_p e^{-i\Delta_m t}-\sqrt{\kappa_{ex}}\left(\bar a+A^-e^{-i\Delta_m t}+A^+e^{i\Delta_m t}\right)\\<br>&amp;=(s_c-\sqrt{\kappa_{ex}}\bar a)+(\delta s_p-\sqrt{\kappa_{ex}}A^-)e^{-i\Delta_m t}-\sqrt{\kappa_{ex}}A^+e^{i\Delta_m t}<br>\end{aligned}<br>$$<br>我们只关心泵浦光分量，所以有<br>$$<br>\begin{aligned}<br>t_p&amp;=\frac{\delta s_p-\sqrt{\kappa_{ex}}A^-}{\delta s_p}\\<br>&amp;=1-\frac{1+if}{\kappa/2-i(\bar \Delta+\Delta_m)+2f\bar \Delta}\kappa_{ex}<br>\end{aligned}<br>$$</p>
<h2 id="简化"><a href="#简化" class="headerlink" title="简化"></a>简化</h2><p>考虑实际实验，我们做如下简化</p>
<ol>
<li>控制光处在resolved-sideband region，$\kappa\ll\Omega_m$，此时$A^+\approx 0$</li>
<li>$\Delta’=\Delta_m-\Omega_m\approx 0$，此时$\Omega_m^2-\Delta_m^2-i\Gamma_m\Delta_m\approx -\Omega_m(2\Delta’+i\Gamma_m)$<br>我们有<br>$$<br>\begin{aligned}<br>&amp;A^- \left(\kappa/2-i \left(\bar \Delta +\Delta’+\Omega_m\right)\right)=\sqrt{\kappa _{\text{ex}}} \delta s_p-i \bar a g_0 X\\<br>&amp;-\Omega_m X \left(2\Delta ‘+i \Gamma _m\right)=-\frac{\hbar g_0}{m_{\text{eff}}}\bar a^\dagger A^-<br>\end{aligned}$$<br>容易求得<br>$$<br>A^-=\frac{\sqrt{\kappa_{ex}}\delta s_p}{\kappa/2-i(\bar \Delta +\Delta’+\Omega_m)+\frac{|\Omega_c|^2/4}{-i\Delta’+\Gamma_m/2}}<br>$$<br>其中$\Omega_c=2g_0\bar ax_{zpf},x_{zpf}=\sqrt{\frac{\hbar}{2m_{eff}\Omega_m}}$<br>跟EIT的表达式是一样的。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍光机械诱导透明(OMIT)&lt;/p&gt;
    
    </summary>
    
    
      <category term="Physics" scheme="http://thuxuxs.github.io/tags/Physics/"/>
    
  </entry>
  
  <entry>
    <title>格林函数</title>
    <link href="http://thuxuxs.github.io/2016/12/02/%E6%A0%BC%E6%9E%97%E5%87%BD%E6%95%B0/"/>
    <id>http://thuxuxs.github.io/2016/12/02/格林函数/</id>
    <published>2016-12-02T17:24:21.000Z</published>
    <updated>2016-12-02T18:00:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>以势能的求解为例，我们来了解一下格林函数。<br><a id="more"></a><br>假设空间有电荷量分布为$\rho(r)$,则根据高斯定理，我们有空间电场应该满足条件$$\nabla\cdot E(r)=\frac{\rho(r)}{\varepsilon_0},$$再根据$E(r)=-\nabla \phi(r)$，结合起来看，我们可以求得电势和电荷分布之间的关系$$-\nabla^2\phi(r)=\frac{\rho(r)}{\varepsilon_0},$$此即为泊松方程，进一步我们有<br>$$\begin{aligned}<br>-\nabla^2\phi(r_1)&amp;=\frac{\rho(r_1)}{\varepsilon_0}\\<br>&amp;=\frac{1}{\varepsilon_0}\int\delta(r_1-r_2)\rho(r_2)d^3r_2\\<br>&amp;=\frac{1}{\varepsilon_0}\int[-\nabla^2G(r_1,r_2)]\rho(r_2)d^3r_2\\<br>&amp;=-\nabla^2\left\{\frac{1}{\varepsilon_0}\int G(r_1,r_2)\rho(r_2)d^3r_2\right\}<br>\end{aligned}$$<br>其中$G(r_1,r_2)$即为格林函数。所以我们求解此泊松方程等价于求满足$$-\nabla^2G(r_1,r_2)]=\delta(r_1-r_2)$$的格林函数即可，然后在利用$$\phi(r_1)=\frac{1}{\varepsilon_0}\int G(r_1,r_2)\rho(r_2)d^3r_2$$可求得空间的电势分布。其实，根据电势叠加定理我们可以直接写出$$\phi(r_1)=\frac{1}{4\pi\varepsilon_0}\int\frac{\rho(r_2)}{\left|r_1-r_2\right|}d^3r_2$$由此得到的格林函数$$G(r_1,r_2)=\frac{1}{4\pi}\frac{1}{\left|r_1-r_2\right|}$$与前式满足泊松方程所解得的格林函数是一致的。对于这种利用格林函数来求解微分方程的方法，我们可以理解为利用点电荷产生的势的叠加来求得总的势。</p>
<h3 id="更一般的情况"><a href="#更一般的情况" class="headerlink" title="更一般的情况"></a>更一般的情况</h3><p>设我们有算符$\mathcal{L}$，其作用在势分布函数$y(r)$上得到空间源分布$f(r)$，则我们有<br>$$\begin{aligned}<br>\mathcal{L}y(r)&amp;=f(r)\\<br>&amp;=\int\delta(r-r’)f(r’)dr’\\<br>&amp;=\int \mathcal{L}G(r,r’)f(r’)dr’\\<br>&amp;=\mathcal{L}\int G(r,r’)f(r’)dr’\\<br>\end{aligned}$$<br>并且<br>$$<br>\mathcal{L} G(r,r’)=\delta(r-r’)<br>$$$$<br>y(r)=\int G(r,r’)f(r’)dr’<br>$$</p>
<h3 id="物理学中的一些格林函数"><a href="#物理学中的一些格林函数" class="headerlink" title="物理学中的一些格林函数"></a>物理学中的一些格林函数</h3><p>$$\begin{array}{c|ccc}<br>dim &amp; \nabla^2 &amp; \nabla^2+k^2 &amp; \nabla^2-k^2\\<br>\hline<br>1 &amp; \frac{1}{2}\left|x_1-x_2\right| &amp; -\frac{i}{2k}\exp(ik\left|x_1-x_2\right|) &amp; -\frac{1}{2k}\exp(-k\left|x_1-x_2\right|)\\<br>2 &amp; \frac{1}{2\pi}\ln\left|\rho_1-\rho_2\right| &amp; -\frac{i}{4}H_0^{(1)}(k\left|\rho_1-\rho_2\right|) &amp; -\frac{1}{2\pi}K_0(k\left|\rho_1-\rho_2\right|)\\<br>3 &amp; -\frac{1}{4\pi}\frac{1}{\left|r_1-r_2\right|} &amp; -\frac{\exp(ik\left|r_1-r_2\right|)}{4\pi\left|r_1-r_2\right|} &amp; -\frac{\exp(-k\left|r_1-r_2\right|)}{4\pi\left|r_1-r_2\right|}<br>\end{array}$$<br>其中$H_0^{(1)}$为Hankel函数，$K_0$是modified Bessel函数。</p>
<blockquote>
<p>求得格林函数后，如果积分不容易，我们可以采用技术展开的方法来积分，例如波恩近似便是。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以势能的求解为例，我们来了解一下格林函数。&lt;br&gt;
    
    </summary>
    
    
      <category term="Physics" scheme="http://thuxuxs.github.io/tags/Physics/"/>
    
  </entry>
  
  <entry>
    <title>BSIT</title>
    <link href="http://thuxuxs.github.io/2016/11/28/BSIT/"/>
    <id>http://thuxuxs.github.io/2016/11/28/BSIT/</id>
    <published>2016-11-29T04:54:12.000Z</published>
    <updated>2016-12-04T08:45:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>介绍布里渊诱导透明(BSIT)<br><a id="more"></a></p>
<h1 id="布里渊诱导透明"><a href="#布里渊诱导透明" class="headerlink" title="布里渊诱导透明"></a>布里渊诱导透明</h1><p><a href="http://www.nature.com/nphys/journal/v11/n3/abs/nphys3236.html" target="_blank" rel="external"><code>Kim J H, Kuzyk M C, Han K, et al. Non-reciprocal Brillouin scattering induced transparency[J]. Nature Physics, 2015, 11(3): 275-280.</code></a><br><img src="/img/BSIT.jpeg" alt="布里渊诱导透明--反斯托克斯"></p>
<h2 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h2><p>腔内有两个光学模式：$\omega_1$，$\omega_2$<br>腔内有一个布里渊模式：$\Omega_m$<br>在$\omega_1$附近的强控制光：$\omega_c$<br>在$\omega_2$附近的弱泵浦光：$\omega_p$<br>各失谐量：<br>$\Delta_1=\omega_c-\omega_1$<br>$\Delta_2=\omega_p-\omega_2$<br>$\delta=\omega_2-\omega_1-\Omega_m$<br>$\Delta_B=\omega_p-\omega_c-\Omega_m$</p>
<h2 id="哈密顿量"><a href="#哈密顿量" class="headerlink" title="哈密顿量"></a>哈密顿量</h2><p>未经过布里渊耦合时：<br>$$<br>\begin{aligned}<br>H&amp;=\hbar\omega_1 a^\dagger_1 a_1+\hbar\omega_2 a^\dagger_2 a_2\\<br>&amp;+i\hbar\sqrt{\kappa_{ex,1}}s_{in,1}(a^\dagger_1 e^{-i\omega_c t}-a_1 e^{i\omega_c t})\\<br>&amp;+i\hbar\sqrt{\kappa_{ex,2}}s_{in,2}(a^\dagger_2 e^{-i\omega_p t}-a_2 e^{i\omega_p t})<br>\end{aligned}<br>$$<br>那么以$\omega_c$光为参考，即选择酉变换$U=\exp(i\omega_c a^\dagger_1 a_1 t)$，此时模式一的运动方程为（考虑了损耗）<br>$$\frac{da_1}{dt}=i\Delta_1 a_1-\frac{\kappa_1}{2}a_1+\sqrt{\kappa_{ex,1}}s_{in,1}$$</p>
<blockquote>
<p>这里用到公式$H’=U H U^\dagger -i\hbar U\partial U^\dagger /\partial t$</p>
</blockquote>
<p>在稳态是，导数为零，我们解得<br>$$a_1=\frac{\sqrt{\kappa_{ex,1}}s_{in,1}}{-i\Delta_1+\kappa_1/2}$$<br>在实验室参考系中，应该在做逆变换<br>$$U a_1 U^\dagger=\frac{\sqrt{\kappa_{ex,1}}s_{in,1}}{-i\Delta_1+\kappa_1/2}e^{-i\omega_ct}$$</p>
<p>当进过布里渊耦合时，哈密顿量为<br>$$<br>\begin{aligned}<br>H&amp;=\hbar\omega_1 a^\dagger_1 a_1+\hbar\omega_2 a^\dagger_2 a_2+\hbar\Omega_m b^\dagger b+\hbar g(a^\dagger_1 b^\dagger a_2+a_1 b a^\dagger_2)\\<br>&amp;+i\hbar\sqrt{\kappa_{ex,1}}s_{in,1}(a^\dagger_1 e^{-i\omega_c t}-a_1 e^{i\omega_c t})\\<br>&amp;+i\hbar\sqrt{\kappa_{ex,2}}s_{in,2}(a^\dagger_2 e^{-i\omega_p t}-a_2 e^{i\omega_p t})<br>\end{aligned}<br>$$<br>由于控制光为强光，那么我们可以认定$a_1$为一复数，$a_1^\dagger a_1=n_1$，所以</p>
<p>$$a_1=\sqrt{n_1}e^{-i\omega_c t}=\left|\frac{\sqrt{\kappa_{ex,1}}s_{in,1}}{-i\Delta_1+\kappa_1/2}\right|e^{-i\omega_c t}$$</p>
<p>将其代入哈密顿量，并忽略常数项，我们得到<br>$$<br>\begin{aligned}<br>H&amp;=\hbar\omega_2 a^\dagger_2 a_2+\hbar\Omega_m b^\dagger b+\hbar g\sqrt{n_1}(b^\dagger a_2 e^{i\omega_c t}+b a_2^\dagger e^{-i\omega_c t})\\<br>&amp;+i\hbar\sqrt{\kappa_{ex,2}}s_{in,2}(a^\dagger_2 e^{-i\omega_p t}-a_2 e^{i\omega_p t})<br>\end{aligned}$$<br>对于上述的哈密顿量，我们选择酉变换$$U=\exp(i\omega_p a^\dagger_2 a_2 t+i(\omega_p-\omega_c)b^\dagger b t)$$</p>
<p>我们得到变换后的哈密顿量为<br>$$<br>\begin{aligned}<br>H&amp;=\hbar(\omega_2-\omega_p)a^\dagger_2 a_2+\hbar(\Omega_m-(\omega_p-\omega_c))b^\dagger b\\<br>&amp;+\hbar g\sqrt{n_1}(b^\dagger a_2 +b a^\dagger_2)+i\hbar\sqrt{\kappa_{ex,2}}s_{in,2}(a^\dagger_2-a_2)\\<br>&amp;=-\hbar \Delta_2 a^\dagger_2 a_2-\hbar \Delta_B b^\dagger b\\<br>&amp;+\hbar g\sqrt{n_1}(b^\dagger a_2 +b a^\dagger_2)+i\hbar\sqrt{\kappa_{ex,2}}s_{in,2}(a^\dagger_2-a_2)\\<br>\end{aligned}$$</p>
<p>得到哈密顿量后我们可以写出泵浦光和布里渊模的运动方程（考虑损耗）<br>$$<br>\begin{array}{}<br>\frac{da_2}{dt}=(i\Delta_2-\kappa_2/2) a_2-ig\sqrt{n_1}b+\sqrt{\kappa_{ex,2}}s_{in,2}\\<br>\\<br>\frac{db}{dt}=(i\Delta_B-\Gamma_m )b-i g \sqrt{n_1}a_2<br>\end{array}<br>$$</p>
<p>在稳态下求解的，<br>$$<br>a_2=-\frac{\sqrt{\kappa _{\text{ex},2}} s_{\text{in},2}}{\frac{g^2 n_1}{-\Gamma _m+i \Delta _B}+i \Delta _2-\frac{\kappa _2}{2}}<br>$$</p>
<p>代入输入输出关系$s_{out,2}=s_{in,2}-\sqrt{\kappa_{ex,2}}a_2$，求出投射谱<br>$$T=\text{Abs}\left(1-\frac{\sqrt{\kappa_{ex,2}}a_2}{s_{in,2}}\right)^2$$<br><code>Mathematica</code>代码如下<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Manipulate</span>[</div><div class="line"> <span class="keyword">Plot</span>[<span class="keyword">Abs</span>[<span class="number">1</span> + <span class="number">1</span>/(<span class="keyword">I</span> x - a + b/(<span class="keyword">I</span> x - c))]^<span class="number">2</span>, &#123;x, -4, 4&#125;,</div><div class="line">  <span class="keyword">PlotRange</span> -&gt; &#123;&#123;-4, 4&#125;, &#123;0, 1&#125;&#125;], &#123;a, 0.5, 2&#125;, &#123;b, 0, 2&#125;, &#123;c, 0, 2&#125;]</div></pre></td></tr></table></figure></p>
<p><img src="/img/BSIT_OUT.jpeg" alt="布里渊诱导透明"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍布里渊诱导透明(BSIT)&lt;br&gt;
    
    </summary>
    
    
      <category term="Physics" scheme="http://thuxuxs.github.io/tags/Physics/"/>
    
  </entry>
  
  <entry>
    <title>Hexo中添加MathJax</title>
    <link href="http://thuxuxs.github.io/2016/11/23/Hexo%E4%B8%AD%E6%B7%BB%E5%8A%A0MathJax/"/>
    <id>http://thuxuxs.github.io/2016/11/23/Hexo中添加MathJax/</id>
    <published>2016-11-23T23:00:59.000Z</published>
    <updated>2016-11-24T03:55:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍怎么在Hexo中添加MathJax支持及MathJax示例<br><a id="more"></a></p>
<h1 id="通过添加MathJax的js可以实现"><a href="#通过添加MathJax的js可以实现" class="headerlink" title="通过添加MathJax的js可以实现"></a>通过添加MathJax的js可以实现</h1><h2 id="如何添加"><a href="#如何添加" class="headerlink" title="如何添加"></a>如何添加</h2><ul>
<li><p>如果您使用的主题由jade文件构成，那么您需要在主题的<code>\layout\partial\scripts.jade</code>中添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">script(type=&apos;text/javascript&apos;, src=&apos;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&apos;, async)</div><div class="line"></div><div class="line">script(type=&apos;text/x-mathjax-config&apos;).</div><div class="line">  MathJax.Hub.Config(&#123;&quot;HTML-CSS&quot;: &#123; preferredFont: &quot;TeX&quot;, availableFonts: [&quot;STIX&quot;,&quot;TeX&quot;], linebreaks: &#123; automatic:true &#125;, EqnChunk: (MathJax.Hub.Browser.isMobile ? 10 : 50) &#125;,</div><div class="line">  tex2jax: &#123; inlineMath: [ [&quot;$&quot;, &quot;$&quot;], [&quot;\\\(&quot;,&quot;\\)&quot;] ], processEscapes: true, ignoreClass: &quot;tex2jax_ignore|dno&quot;,skipTags: [&apos;script&apos;, &apos;noscript&apos;, &apos;style&apos;, &apos;textarea&apos;, &apos;pre&apos;, &apos;code&apos;]&#125;,</div><div class="line">  TeX: &#123; noUndefined: &#123; attributes: &#123; mathcolor: &quot;red&quot;, mathbackground: &quot;#FFEEEE&quot;, mathsize: &quot;90%&quot; &#125; &#125;, Macros: &#123; href: &quot;&#123;&#125;&quot; &#125; &#125;,</div><div class="line">  messageStyle: &quot;none&quot;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>如果您使用的主题配置文件是ejs文件，那么您需要在<code>\layout\_partial\after-footer.ejs</code>中添加</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/x-mathjax-config"</span>&gt;</div><div class="line"> MathJax.Hub.Config(&#123;<span class="string">"HTML-CSS"</span>: &#123; <span class="attr">preferredFont</span>: <span class="string">"TeX"</span>, <span class="attr">availableFonts</span>: [<span class="string">"STIX"</span>,<span class="string">"TeX"</span>], <span class="attr">linebreaks</span>: &#123; <span class="attr">automatic</span>:<span class="literal">true</span> &#125;, <span class="attr">EqnChunk</span>: (MathJax.Hub.Browser.isMobile ? <span class="number">10</span> : <span class="number">50</span>) &#125;,</div><div class="line"> <span class="attr">tex2jax</span>: &#123; <span class="attr">inlineMath</span>: [ [<span class="string">"$"</span>, <span class="string">"$"</span>], [<span class="string">"\\("</span>,<span class="string">"\\)"</span>] ], <span class="attr">processEscapes</span>: <span class="literal">true</span>, <span class="attr">ignoreClass</span>: <span class="string">"tex2jax_ignore|dno"</span>,<span class="attr">skipTags</span>: [<span class="string">'script'</span>, <span class="string">'noscript'</span>, <span class="string">'style'</span>, <span class="string">'textarea'</span>, <span class="string">'pre'</span>, <span class="string">'code'</span>]&#125;,</div><div class="line"> <span class="attr">TeX</span>: &#123; <span class="attr">noUndefined</span>: &#123; <span class="attr">attributes</span>: &#123; <span class="attr">mathcolor</span>: <span class="string">"red"</span>, <span class="attr">mathbackground</span>: <span class="string">"#FFEEEE"</span>, <span class="attr">mathsize</span>: <span class="string">"90%"</span> &#125; &#125;, <span class="attr">Macros</span>: &#123; <span class="attr">href</span>: <span class="string">"&#123;&#125;"</span> &#125; &#125;,</div><div class="line"> <span class="attr">messageStyle</span>: <span class="string">"none"</span></div><div class="line"> &#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="MathJax示例"><a href="#MathJax示例" class="headerlink" title="MathJax示例"></a>MathJax示例</h2><p>这是行内公式$E=mc^2$，下面是独立的公式<br>$$<br>\begin{aligned}<br>a=\sum_{i=1}^n i=\frac{n(1+n)}{2}<br>\end{aligned}<br>$$</p>
<h2 id="防止marked解析markdown出错，我们还需要"><a href="#防止marked解析markdown出错，我们还需要" class="headerlink" title="防止marked解析markdown出错，我们还需要"></a>防止marked解析markdown出错，我们还需要</h2><p>请在Hexo的<code>\node_modules\marked\lib\marked.js</code>中做如下修改<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([\\`*&#123;&#125;\[\]()#+\-.!_&gt;])/</span>,</div></pre></td></tr></table></figure></p>
<p>改为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([`*\[\]()# +\-.!_&gt;])/</span>,</div></pre></td></tr></table></figure></p>
<p>另外，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">em: <span class="regexp">/^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</div></pre></td></tr></table></figure></p>
<p>改为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">em:<span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍怎么在Hexo中添加MathJax支持及MathJax示例&lt;br&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://thuxuxs.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
