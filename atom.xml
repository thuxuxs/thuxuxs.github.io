<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>thuxuxs</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://thuxuxs.github.io/"/>
  <updated>2017-10-05T21:42:59.000Z</updated>
  <id>https://thuxuxs.github.io/</id>
  
  <author>
    <name>Xusheng Xu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ML 概率论基础</title>
    <link href="https://thuxuxs.github.io/2017/10/05/ML-%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
    <id>https://thuxuxs.github.io/2017/10/05/ML-概率论基础/</id>
    <published>2017-10-05T18:11:44.000Z</published>
    <updated>2017-10-05T21:42:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍概率论中的基础知识<br><a id="more"></a></p>
<ul>
<li>表A，五个小球的颜色和大小</li>
</ul>
<table>
<thead>
<tr>
<th>质量</th>
<th>颜色</th>
</tr>
</thead>
<tbody>
<tr>
<td>小</td>
<td>红</td>
</tr>
<tr>
<td>大</td>
<td>红</td>
</tr>
<tr>
<td>大</td>
<td>黄</td>
</tr>
<tr>
<td>小</td>
<td>黄</td>
</tr>
<tr>
<td>小</td>
<td>红</td>
</tr>
</tbody>
</table>
<h2 id="概率"><a href="#概率" class="headerlink" title="概率"></a>概率</h2><p>事件A发生的概率记为$P(A)$，也称为A的先验概率，例如对于表A中的小球大小这个属性来说$P(s)=3/5$（大球为b,小球为s，红色为r，黄色为y，质量M，颜色C）</p>
<h2 id="条件概率"><a href="#条件概率" class="headerlink" title="条件概率"></a>条件概率</h2><p>有两个事件A和B，则条件概率$P(A|B)$表示在条件B发生后A发生的概率，也叫做A的后验概率，例如对于表A，已知球的颜色为红色的条件下求小球的概率，$P(s|r)=2/3=P(s\cap r)/P(r)$</p>
<h2 id="信息熵"><a href="#信息熵" class="headerlink" title="信息熵"></a>信息熵</h2><p>表示一个属性的混乱程度，如果这个属性只取一个分类，那么熵为零，定义式为$H(X)=-\sum_i{p_i\log p_i}$，例如表A中颜色的熵为<br>$$<br>\begin{aligned}<br>H(C)&amp;=-P(r)\log P(r)-P(y)\log P(y)\\<br>&amp;=-0.6\log 0.6-0.4\log 0.4\\<br>&amp;=0.97<br>\end{aligned}<br>$$</p>
<h2 id="条件熵"><a href="#条件熵" class="headerlink" title="条件熵"></a>条件熵</h2><p>条件熵$H(Y|X)$表示给定随机变量X的条件下，随机变量Y的混乱程度，其定义为给定X的情况下Y的分布的熵对X的期望值，下面计算条件熵$H(C|M)$<br>$$\begin{aligned}<br>H(C|M)&amp;=\sum_i{P(M_i)H(C|M_i)}\\<br>&amp;=-\sum_i{P(M_i)\sum_j{P(C_j|M_i)\log P(C_j|M_i)}}\\<br>&amp;=\sum_{i,j}P(C_j\cap M_i)\log\frac{P(M_i)}{P(C_j\cap M_i)}<br>\end{aligned}$$</p>
<table>
<thead>
<tr>
<th>$M_i$</th>
<th>$H(C\</th>
<th>M=M_i)$</th>
</tr>
</thead>
<tbody>
<tr>
<td>s</td>
<td>0.918</td>
</tr>
<tr>
<td>b</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>所以$H(C|M)=0.6<em>0.918+0.4</em>1=0.9508$</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> entropy</div><div class="line"><span class="keyword">print</span> entropy([<span class="number">1</span>,<span class="number">1</span>],base=<span class="number">2</span>)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍概率论中的基础知识&lt;br&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="https://thuxuxs.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-6 ZigZag Conversion</title>
    <link href="https://thuxuxs.github.io/2017/09/29/LeetCode-6-ZigZag-Conversion/"/>
    <id>https://thuxuxs.github.io/2017/09/29/LeetCode-6-ZigZag-Conversion/</id>
    <published>2017-09-29T22:08:24.000Z</published>
    <updated>2017-10-05T21:42:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>some thing<br><a id="more"></a><br>some thing</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;some thing&lt;br&gt;
    
    </summary>
    
    
      <category term="LeetCode" scheme="https://thuxuxs.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>ML之线性规划</title>
    <link href="https://thuxuxs.github.io/2017/06/01/ML%E4%B9%8B%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/"/>
    <id>https://thuxuxs.github.io/2017/06/01/ML之线性规划/</id>
    <published>2017-06-02T03:53:52.000Z</published>
    <updated>2017-06-02T04:11:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>线性规划是机器学习中的最基本问题，根据提供的x来预测y。<br><a id="more"></a><br>设输入变量为$x_i$，对应的输出变量为$y_i$，线性拟合问题及找出最好的线性函数$h_\theta(x)=\theta_0+\theta_1x$，使得其跟输出变量之间的差最小，我们定义这个差值为<br>$$J_(\theta_0,\theta_1)=\frac{1}{m}\sum_{i=1}^m(h_\theta(x_i)-y_i)^2$$<br>我们利用梯度下降算法，来找出最合适的参数$\theta_0,\theta_1$</p>
<blockquote>
<p>$$\begin{aligned}\theta_0&amp;:=\theta_0-\alpha\frac{\partial}{\partial\theta_0}J(\theta_0,\theta_1)\\&amp;:=\theta_0-\frac{\alpha}{m}\sum_{i=1}^m(\theta_0+\theta_1x_i-y_i)\end{aligned}$$<br>$$\begin{aligned}\theta_1&amp;:=\theta_1-\alpha\frac{\partial}{\partial \theta_1}J(\theta_0,\theta_1)\\&amp;:=\theta_1-\frac{\alpha}{m}\sum_{i=1}^m(\theta_0+\theta_1x_i-y_i)x_i\end{aligned}$$</p>
</blockquote>
<p>这里我们利用三种方法来实现，分别为自己写的、利用<code>sklearn</code>程序包和<code>tensorflow</code>机器学习工具包。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line">boston = load_boston()</div><div class="line">data = pd.DataFrame(boston.data)</div><div class="line">data[<span class="string">'target'</span>] = boston.target</div><div class="line">plt.plot(data[<span class="number">5</span>], data[<span class="string">'target'</span>], <span class="string">'.'</span>)</div><div class="line">plt.show()</div><div class="line"></div><div class="line"><span class="comment"># method 1</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reg</span><span class="params">(x, y, alpha, step, theta0, theta1)</span>:</span></div><div class="line">    m = len(x)</div><div class="line">    <span class="keyword">assert</span> m == len(y)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(step):</div><div class="line">        temp = theta0 + theta1 * x - y</div><div class="line">        theta0 = theta0 - alpha / m * sum(temp)</div><div class="line">        theta1 = theta1 - alpha / m * sum(temp * x)</div><div class="line">    <span class="keyword">return</span> theta0, theta1</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_data</span><span class="params">(x, y, theta0, theta1)</span>:</span></div><div class="line">    plt.plot(x, y, <span class="string">'.'</span>)</div><div class="line">    plt.plot(x, theta0 + theta1 * x)</div><div class="line">    plt.show()</div><div class="line"></div><div class="line">theta0 = <span class="number">0</span></div><div class="line">theta1 = <span class="number">0</span></div><div class="line">theta0, theta1 = reg(data[<span class="number">5</span>], data[<span class="string">'target'</span>], <span class="number">0.02</span>, <span class="number">20000</span>, theta0, theta1)</div><div class="line"><span class="keyword">print</span> theta0, theta1</div><div class="line">plot_data(data[<span class="number">5</span>], data[<span class="string">'target'</span>], theta0, theta1)</div><div class="line"></div><div class="line"><span class="comment"># method 2</span></div><div class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</div><div class="line">model = LinearRegression()</div><div class="line">model.fit(data[<span class="number">5</span>].values.reshape(<span class="number">-1</span>, <span class="number">1</span>), data[<span class="string">'target'</span>].values.reshape(<span class="number">-1</span>, <span class="number">1</span>))</div><div class="line">y = model.predict(data[<span class="number">5</span>].values.reshape(<span class="number">-1</span>, <span class="number">1</span>))</div><div class="line">plt.plot(data[<span class="number">5</span>], data[<span class="string">'target'</span>], <span class="string">'.'</span>, label=<span class="string">'data'</span>)</div><div class="line">plt.plot(data[<span class="number">5</span>], y, label=<span class="string">'sklearn'</span>)</div><div class="line">plt.plot(data[<span class="number">5</span>], theta0 + data[<span class="number">5</span>] * theta1, label=<span class="string">'myself'</span>)</div><div class="line">plt.legend()</div><div class="line">plt.show()</div><div class="line">model.score(data[<span class="number">5</span>].values.reshape(<span class="number">-1</span>, <span class="number">1</span>), data[<span class="string">'target'</span>].values.reshape(<span class="number">-1</span>, <span class="number">1</span>))</div><div class="line"><span class="keyword">print</span> model.intercept_, model.coef_</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># method 3</span></div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"></div><div class="line">X = tf.placeholder(tf.float32)</div><div class="line">Y = tf.placeholder(tf.float32)</div><div class="line"></div><div class="line">w = tf.Variable(<span class="number">0.0</span>, name=<span class="string">'weights'</span>)</div><div class="line">b = tf.Variable(<span class="number">0.0</span>, name=<span class="string">'biases'</span>)</div><div class="line">y = X * w + b</div><div class="line">cost = tf.square(Y - y)</div><div class="line">optim = tf.train.GradientDescentOptimizer(<span class="number">0.02</span>).minimize(cost)</div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">    init = tf.global_variables_initializer()</div><div class="line">    sess.run(init)</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">200</span>):</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</div><div class="line">            sess.run(optim, feed_dict=&#123;X: data[<span class="number">5</span>].values[i], Y: data[<span class="string">'target'</span>].values[i]&#125;)</div><div class="line">    <span class="keyword">print</span> sess.run(w)</div><div class="line">    <span class="keyword">print</span> sess.run(b)</div><div class="line"></div><div class="line"></div><div class="line">learning_rate = <span class="number">0.02</span></div><div class="line">training_epochs = <span class="number">200</span></div><div class="line">display_step = <span class="number">50</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Training Data</span></div><div class="line">train_X = data[<span class="number">5</span>].values</div><div class="line">train_y = data[<span class="string">'target'</span>].values</div><div class="line">n_samples = train_X.shape[<span class="number">0</span>]</div><div class="line"></div><div class="line">X = tf.placeholder(tf.float32)</div><div class="line">Y = tf.placeholder(tf.float32)</div><div class="line"></div><div class="line">W = tf.Variable(np.random.randn())</div><div class="line">b = tf.Variable(np.random.randn())</div><div class="line">activation = W * X + b</div><div class="line"><span class="comment"># activation = tf.add(tf.multiply(X,W), b)</span></div><div class="line"></div><div class="line">cost = tf.square(Y - activation)</div><div class="line">optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)</div><div class="line"></div><div class="line">init = tf.global_variables_initializer()</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">    sess.run(init)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(training_epochs):</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</div><div class="line">            sess.run(optimizer, feed_dict=&#123;X: train_X[i], Y: train_y[i]&#125;)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> epoch % display_step == <span class="number">0</span>:</div><div class="line">            print(<span class="string">'Epoch:%d'</span> % (epoch + <span class="number">1</span>), <span class="string">'cost:'</span>,</div><div class="line">                  <span class="string">'W:'</span>, sess.run(W), <span class="string">'b:'</span>, sess.run(b))</div><div class="line"></div><div class="line">    print(<span class="string">"Optimization Finished!"</span>)</div><div class="line">    print(<span class="string">'Epoch:%d'</span> % (epoch + <span class="number">1</span>),</div><div class="line">          <span class="string">'W:'</span>, sess.run(W), <span class="string">'b:'</span>, sess.run(b))</div><div class="line">    plt.scatter(train_X, train_y, c=<span class="string">'r'</span>, marker=<span class="string">'o'</span>)</div><div class="line">    plt.plot(train_X, sess.run(W) * train_X + sess.run(b))</div><div class="line">    plt.show()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;线性规划是机器学习中的最基本问题，根据提供的x来预测y。&lt;br&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="https://thuxuxs.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>python-property装饰器</title>
    <link href="https://thuxuxs.github.io/2017/06/01/python-property%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>https://thuxuxs.github.io/2017/06/01/python-property装饰器/</id>
    <published>2017-06-01T18:42:53.000Z</published>
    <updated>2017-09-29T22:18:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍python的property装饰器<br><a id="more"></a><br>property装饰器可以将一个类的方法变为一个类的属性，从而可以直接通过点的方法来改变这个属性的值，不需要调用getter和setter函数，此方法基于<code>object</code>新类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">signal_generator</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">      self._center_frequency=<span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">center_frequency</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._center_frequency</div><div class="line"></div><div class="line"><span class="meta">    @center_frequency.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">center_frequency</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'set center_frequency'</span></div><div class="line">        self._center_frequency = value</div><div class="line"></div><div class="line"><span class="meta">    @center_frequency.getter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">center_frequency</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'get center_frequency'</span></div><div class="line">        <span class="keyword">return</span> self._center_frequency</div><div class="line"></div><div class="line">a = signal_generator()</div><div class="line"><span class="keyword">print</span> a.center_frequency</div><div class="line">a.center_frequency = <span class="number">10</span></div><div class="line">a.center_frequency += <span class="number">10</span></div><div class="line"><span class="keyword">print</span> a.center_frequency</div><div class="line"></div><div class="line"><span class="comment"># &gt;&gt;&gt; set center_frequency</span></div><div class="line"><span class="comment"># &gt;&gt;&gt; get center_frequency</span></div><div class="line"><span class="comment"># &gt;&gt;&gt; set center_frequency</span></div><div class="line"><span class="comment"># &gt;&gt;&gt; get center_frequency</span></div><div class="line"><span class="comment"># &gt;&gt;&gt; 20</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍python的property装饰器&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://thuxuxs.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python零碎笔记</title>
    <link href="https://thuxuxs.github.io/2017/05/30/Python%E9%9B%B6%E7%A2%8E%E7%AC%94%E8%AE%B0/"/>
    <id>https://thuxuxs.github.io/2017/05/30/Python零碎笔记/</id>
    <published>2017-05-30T23:12:55.000Z</published>
    <updated>2017-06-02T06:17:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录Python零碎的笔记<br><a id="more"></a></p>
<h1 id="os-模块"><a href="#os-模块" class="headerlink" title="os 模块"></a>os 模块</h1><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><ul>
<li><p>判断文件是否存在<br><code>os.path.exists</code></p>
</li>
<li><p>获取当前目录<br><code>os.getcwd()</code></p>
</li>
<li><p>打印目录中的所有文件及目录<br><code>os.listdir(os.getcwd())</code></p>
</li>
<li><p>更改所在目录<br><code>os.chdir(&#39;./path&#39;)</code></p>
</li>
<li><p>合并路径<br><code>os.path.join(os.getcwd(),os.listdir(os.getcwd())[0])</code></p>
</li>
</ul>
<h2 id="综合示例"><a href="#综合示例" class="headerlink" title="综合示例"></a>综合示例</h2><p>进入当前文件夹内的第一个文件夹<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line">os.getcwd()</div><div class="line">a = os.listdir(<span class="string">'./'</span>)</div><div class="line"><span class="keyword">print</span> a</div><div class="line">i = <span class="number">0</span></div><div class="line"><span class="keyword">while</span> <span class="keyword">not</span> os.path.isdir(os.path.join(os.getcwd(), a[i])):</div><div class="line">    i += <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> i == len(a):</div><div class="line">        <span class="keyword">break</span></div><div class="line">os.chdir(os.path.join(os.getcwd(), a[i]))</div><div class="line"><span class="keyword">print</span> os.listdir(<span class="string">'./'</span>)</div></pre></td></tr></table></figure></p>
<h1 id="zipfile模块"><a href="#zipfile模块" class="headerlink" title="zipfile模块"></a>zipfile模块</h1><h2 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h2><ul>
<li><p>压缩文件<br><code>zipfile.ZipFile(zipfilename,&#39;w&#39;).write(filename)</code></p>
</li>
<li><p>解压文件<br><code>zipfile.ZipFile(zipfilename).extractall(&#39;./dic_path&#39;)</code></p>
</li>
</ul>
<h2 id="综合示例-1"><a href="#综合示例-1" class="headerlink" title="综合示例"></a>综合示例</h2><p>讲当前目录中的python文件全部压缩起来，然后解压<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> zipfile</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">zip_all_py</span><span class="params">(filename)</span>:</span></div><div class="line">    <span class="keyword">if</span> os.path.exists(filename):</div><div class="line">        os.remove(filename)</div><div class="line">    <span class="keyword">with</span> zipfile.ZipFile(filename, <span class="string">'w'</span>) <span class="keyword">as</span> f:</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(<span class="string">'./'</span>):</div><div class="line">            <span class="keyword">if</span> i[<span class="number">-3</span>:] == <span class="string">'.py'</span>:</div><div class="line">                f.write(i)</div><div class="line"></div><div class="line">filename = <span class="string">'all_py.zip'</span></div><div class="line">zip_all_py(filename)</div><div class="line">zf = zipfile.ZipFile(filename)</div><div class="line">zf.namelist()</div><div class="line">zf.extractall(<span class="string">'./all_zip'</span>)</div><div class="line">zipfile.ZipFile(filename).extractall(<span class="string">'./all_zip'</span>)</div></pre></td></tr></table></figure></p>
<h1 id="tensorflow"><a href="#tensorflow" class="headerlink" title="tensorflow"></a>tensorflow</h1><ul>
<li><p>softmax<br>用于对 <strong>多类问题的分类</strong><br>$$softmax(x)=normalize(\exp(x))$$<br>$$softmax(x_i)=\frac{\exp(x_i)}{\sum_i\exp(x_i)}$$</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line">x=np.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">10</span>)</div><div class="line"></div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">  y=sess.run(tf.nn.softmax(x))</div><div class="line"></div><div class="line">plt.plot(x,y,label=<span class="string">'tensorflow'</span>)</div><div class="line">plt.plot(x,np.exp(x)/sum(np.exp(x)),<span class="string">'.'</span>,label=<span class="string">'numpy'</span>)</div><div class="line">plt.legend()</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
</li>
<li><p>argmax<br>计算传入矩阵某个轴向最大值的位置，axis=0表示某一列的最大值</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">  <span class="keyword">print</span> sess.run(tf.argmax(np.eye(<span class="number">3</span>),<span class="number">0</span>))</div></pre></td></tr></table></figure>
</li>
<li><p>reduce_mean/reduce_max<br>在传入矩阵的某一维度计算函数（如果没指定则为整个矩阵）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">  <span class="keyword">print</span> sess.run(tf.reduce_mean([[<span class="number">1.</span>,<span class="number">2.</span>],[<span class="number">3.</span>,<span class="number">4.</span>]])) <span class="comment">#2.5</span></div><div class="line">  <span class="keyword">print</span> sess.run(tf.reduce_mean([[<span class="number">1.</span>,<span class="number">2.</span>],[<span class="number">3.</span>,<span class="number">4.</span>]],<span class="number">0</span>))<span class="comment">#[2.,3.]</span></div><div class="line">  <span class="keyword">print</span> sess.run(tf.reduce_mean([[<span class="number">1.</span>,<span class="number">2.</span>],[<span class="number">3.</span>,<span class="number">4.</span>]],<span class="number">1</span>))<span class="comment">#[1.5,3.5]</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="杂"><a href="#杂" class="headerlink" title="杂"></a>杂</h1><ul>
<li>讲一个一维行向量转置成一个列向量<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">print</span> np.linspace(<span class="number">0</span>,<span class="number">1</span>,<span class="number">10</span>).reshape(<span class="number">-1</span>,<span class="number">1</span>)</div><div class="line"><span class="keyword">print</span> np.linspace(<span class="number">0</span>,<span class="number">1</span>,<span class="number">10</span>).reshape(<span class="number">-1</span>,<span class="number">2</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这里-1表示合适的值</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录Python零碎的笔记&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://thuxuxs.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>optomechanical damping</title>
    <link href="https://thuxuxs.github.io/2017/05/08/optomechanical-damping/"/>
    <id>https://thuxuxs.github.io/2017/05/08/optomechanical-damping/</id>
    <published>2017-05-09T05:39:46.000Z</published>
    <updated>2017-05-19T23:40:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>This article is about optomechanical damping rate<br><a id="more"></a></p>
<h1 id="Motion-equation"><a href="#Motion-equation" class="headerlink" title="Motion equation"></a>Motion equation</h1><p>$$\begin{aligned}<br>\dot{\alpha}&amp;=(i\Delta-\frac{\kappa}{2})\alpha+iGx\alpha+\sqrt{\kappa_{ex}}\alpha_{in}\\<br>m_{eff}\ddot{x}&amp;=-m_{eff}\Omega_m^2x-m_{eff}\Gamma_m\dot{x}+\hbar G|\alpha|^2<br>\end{aligned}$$</p>
<h1 id="Frequency-space"><a href="#Frequency-space" class="headerlink" title="Frequency space"></a>Frequency space</h1><p>We choice $\alpha=\bar{\alpha}+\delta\alpha$ to linearize, and then we get<br>$$\begin{aligned}<br>-i\omega\delta\alpha[\omega]&amp;=(i\Delta-\frac{\kappa}{2})\delta\alpha[\omega]+iG\bar{\alpha}x[\omega]\\<br>-m_{eff}\omega^2x[\omega]&amp;=-m_{eff}\Omega_m^2x[\omega]+i\omega m_{eff}\Gamma_m x[\omega]\\<br>&amp;+\hbar G(\bar{\alpha}^{\dagger}\delta\alpha[\omega]+\bar{\alpha}\delta\alpha[-\omega]^{\dagger})<br>\end{aligned}$$</p>
<p>From equation one, we get<br>$$\begin{aligned}<br>\delta\alpha[\omega]&amp;=iG\bar{\alpha}\chi_{opt}[\omega]x[\omega]\\<br>\delta\alpha[-\omega]^{\dagger}&amp;=-iG\bar{\alpha}^{\dagger}\chi_{opt}[-\omega]^{\dagger}x[-\omega]^{\dagger}<br>\end{aligned}$$</p>
<p>Insert them back to equation two, we get the modified mechanical susceptibility<br>$$\begin{aligned}<br>\chi^{-1}_{m,eff}(\omega)&amp;=m_{eff}((\Omega_m^2-\omega^2)-i\omega\Gamma_m)\\<br>&amp;+\hbar G^2|\bar{\alpha}|^2(\frac{1}{(\Delta+\omega)+i\kappa/2}+\frac{1}{(\Delta-\omega)-i\kappa/2})\\<br>&amp;=\chi_m^{-1}(\omega)+\Sigma(\omega)<br>\end{aligned}$$<br>By using<br>$$\hbar G^2|\bar{\alpha}|^2=\hbar g_0^2\frac{2m_{eff}\Omega_m}{\hbar}n_{cav}=2m_{eff}\Omega_mg^2$$<br>we get<br>$$\Sigma(\omega)=2m_{eff}\Omega_mg^2(\frac{1}{(\Delta+\omega)+i\kappa/2}+\frac{1}{(\Delta-\omega)-i\kappa/2})$$<br>From the equation above we can get the effective mechanical damping rate<br>$$\begin{aligned}<br>\Gamma_{eff}&amp;=\Gamma_m+\Gamma_{opt}\\<br>&amp;=\Gamma_m\left(1+\frac{\Omega_m}{\omega}\left(\frac{1}{(\frac{\Delta+\omega}{g})^2\frac{\Gamma_m}{\kappa}+\frac{1}{C}}-\frac{1}{(\frac{\Delta-\omega}{g})^2\frac{\Gamma_m}{\kappa}+\frac{1}{C}}\right)\right)<br>\end{aligned}$$<br>Now in weak laser drive, then $g\ll\kappa$, we choice $\omega=\Omega_m$, then we get<br>$$\Gamma_{eff}=\Gamma_m\left(1+\left(\frac{1}{(\frac{\Delta+\Omega_m}{g})^2\frac{\Gamma_m}{\kappa}+\frac{1}{C}}-\frac{1}{(\frac{\Delta-\Omega_m}{g})^2\frac{\Gamma_m}{\kappa}+\frac{1}{C}}\right)\right)$$<br>In the blue detuning(red detuning), $\Delta=\pm\Omega_m$, then<br>$$\Gamma_{eff}|_{\Delta=\pm\Omega_m}=\Gamma_m\left(1\mp C\left(1-\frac{1}{\frac{16\Omega_m^2}{\kappa^2}+1}\right)\right)$$<br>In the resolved-sideband regime, $\kappa\ll\Omega_m$, we can get two conclusions below</p>
<ol>
<li>In red detuning, $\Gamma_{eff}=\Gamma_m(1+C)$, the mechanic mode line width will increase</li>
<li>In blue detuning, $\Gamma_{eff}=\Gamma_m(1-C)$, the mechanic mode line width will decrease. Especially, when C is greater than 1, then we will get an instability.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This article is about optomechanical damping rate&lt;br&gt;
    
    </summary>
    
    
      <category term="Physics" scheme="https://thuxuxs.github.io/tags/Physics/"/>
    
  </entry>
  
  <entry>
    <title>Topological operator on degenerate or non-degenerate modes </title>
    <link href="https://thuxuxs.github.io/2017/04/26/Topological-operator-on-degenerate-or-non-degenerate-modes/"/>
    <id>https://thuxuxs.github.io/2017/04/26/Topological-operator-on-degenerate-or-non-degenerate-modes/</id>
    <published>2017-04-26T21:40:50.000Z</published>
    <updated>2017-04-27T17:58:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>Research on Topological operator on degenerate or non-degenerate modes<br><a id="more"></a></p>
<h1 id="non-degenerate-case"><a href="#non-degenerate-case" class="headerlink" title="non-degenerate case"></a>non-degenerate case</h1><h2 id="Hamiltonian"><a href="#Hamiltonian" class="headerlink" title="Hamiltonian"></a>Hamiltonian</h2><p>$$\begin{aligned}<br>H=&amp;\omega_c a^\dagger a+\sum_{k=1}^2\Omega_kc_k^\dagger c_k+\sum_{k=1}^2g_k(c_k+c_k^\dagger)a^\dagger a\\<br>&amp;+i\sqrt{\kappa_{in}}a_{in,1}(a^\dagger e^{-i\omega_1t}+ae^{i\omega_1t})\\<br>&amp;+i\sqrt{\kappa_{in}}a_{in,2}(a^\dagger e^{-i\omega_2t}+ae^{i\omega_2t})<br>\end{aligned}$$</p>
<h2 id="Equations-of-motion"><a href="#Equations-of-motion" class="headerlink" title="Equations of motion"></a>Equations of motion</h2><p>$$\begin{aligned}<br>&amp;\dot{c_1}=-(i\Omega_1+\gamma_1/2)c_1-ig_1a^\dagger a\\<br>&amp;\dot{c_2}=-(i\Omega_2+\gamma_2/2)c_2-ig_2a^\dagger a\\<br>&amp;\dot{a}=-(i\omega_c+\kappa/2)a-i\sum_{k=1}^2g_k(c_k+c_k^\dagger)a+\sqrt{\kappa_{in}}(a_{in,1}e^{-i\omega_1t}+a_{in,2}e^{-i\omega_2t})<br>\end{aligned}$$</p>
<h2 id="Linearizing"><a href="#Linearizing" class="headerlink" title="Linearizing"></a>Linearizing</h2><p>Suppose $a=(\alpha+d)e^{-i\omega_ct}$</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Research on Topological operator on degenerate or non-degenerate modes&lt;br&gt;
    
    </summary>
    
    
      <category term="Physics" scheme="https://thuxuxs.github.io/tags/Physics/"/>
    
  </entry>
  
  <entry>
    <title>神经网络</title>
    <link href="https://thuxuxs.github.io/2017/03/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>https://thuxuxs.github.io/2017/03/24/神经网络/</id>
    <published>2017-03-24T20:54:29.000Z</published>
    <updated>2017-03-25T00:54:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>神经网络的理论与python实现<br><a id="more"></a></p>
<h2 id="符号说明"><a href="#符号说明" class="headerlink" title="符号说明"></a>符号说明</h2><ol>
<li>$S(z)$：sigmoid函数，$S(z)=1/(1+\exp(-z))$，其导数为$S’(z)=S(z)(1-S(z))$</li>
<li>$a_{l,ij}$：第$l$层神经元的第$j$个神经元对于第$i$组输入数据的数值。</li>
<li>$w_{l,ij}$：从第$l$层的第$i$个神经元计算第$l+1$层的第$j$个神经元的权重，所以有递推公式$a_{l,ij}=S(\sum_k a_{l-1,ik}w_{l-1,kj})=S(b_{l,ij})$，其中$b_{l,ij}=\sum_k a_{l-1,ik}w_{l-1,kj}$，写出矩阵形式，$a_l=S(b_l)=S(a_{l-1}w_{l-1})$</li>
<li>$y_{ij}$：输入第$i$组数据时输出神经元的第$j$个神经元的真实值</li>
</ol>
<h2 id="两层神经网络"><a href="#两层神经网络" class="headerlink" title="两层神经网络"></a>两层神经网络</h2><p>输出的总误差为<br>$$\begin{aligned}<br>C&amp;=\frac{1}{2}\sum_{ij}(a_{2,ij}-y_{ij})2\\<br>&amp;=\frac{1}{2}\sum_{ij}\left(S(\sum_k a_{1,ik}w_{1,kj})-y_{ij}\right)^2<br>\end{aligned}$$<br>次误差为权重的函数，要想是的误差最小，我们使用梯度下降算法，使误差沿着梯度的负方向变化。<br>$$\begin{aligned}<br>\frac{\partial C}{\partial w_{1,kj}}&amp;=\sum_{i}\left(S(\sum_k a_{1,ik}w_{1,kj})-y_{ij}\right)S’(\sum_k a_{1,ik}w_{1,kj})a_{1,ik}\\<br>&amp;=\sum_i a^T_{1,ki}(S(b_{2,ij})-y_{ij})S’(b_{2,ij})<br>\end{aligned}$$<br>写出矩阵形式<br>$$\nabla_1 C=\frac{\partial C}{\partial w_1}=a_1^T\delta_2$$<br>其中$\delta_{2,ij}=(S(b_{2,ij})-y_{ij})S’(b_{2,ij})$，写出矩阵形式为，$\delta_2=(S(b_2)-y).<em>S’(b_2)$。所以权重的更新规则为<br>$$\begin{aligned}<br>w_1&amp;:=w_1-\eta \nabla_1 C\\<br>&amp;:=w_1-\eta a_1^T \delta_2\\<br>&amp;:=w_1-\eta a_1^T ((S(a_1 w_1)-y).</em>S’(a_1 w_1))<br>\end{aligned}$$</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><table>
<thead>
<tr>
<th>a</th>
<th>b</th>
<th>c</th>
<th>out1</th>
<th>out2</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>三个输入神经元，两个输出神经元，我们这里规则是，$out1=a,out2=b+c$<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(x,deriv=False)</span>:</span></div><div class="line">    <span class="keyword">if</span>(deriv==<span class="keyword">True</span>):</div><div class="line">        <span class="comment"># return sigmoid(x)*(1-sigmoid(x))</span></div><div class="line">        <span class="keyword">return</span> np.exp(-x)/(<span class="number">1</span>+np.exp(-x))**<span class="number">2</span></div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>/(<span class="number">1</span>+np.exp(-x))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">nn2</span><span class="params">(a1,y)</span>:</span></div><div class="line">    eta=<span class="number">1</span></div><div class="line">    step=<span class="number">30000</span></div><div class="line">    w1=<span class="number">2</span>*np.random.random((a1.shape[<span class="number">1</span>],y.shape[<span class="number">1</span>]))<span class="number">-1</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(step):</div><div class="line">        b2=a1.dot(w1)</div><div class="line">        w1=w1-eta*a1.T.dot((sigmoid(b2)-y)*sigmoid(b2,<span class="keyword">True</span>))</div><div class="line">    <span class="keyword">return</span> w1</div><div class="line"></div><div class="line">a1=np.array([[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]])</div><div class="line">y=np.array([[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>]])</div><div class="line">testa=np.array([[<span class="number">1</span>,<span class="number">0.4</span>,<span class="number">0.2</span>]])</div><div class="line">testy=np.array([[<span class="number">1</span>,<span class="number">1</span>]])</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'for train data'</span></div><div class="line">w1=nn2(a1,y)</div><div class="line">out=sigmoid(a1.dot(w1))</div><div class="line"><span class="keyword">print</span> y</div><div class="line"><span class="keyword">print</span> out</div><div class="line"></div><div class="line"><span class="keyword">print</span> <span class="string">'for test data'</span></div><div class="line">out=sigmoid(testa.dot(w1))</div><div class="line"><span class="keyword">print</span> testy</div><div class="line"><span class="keyword">print</span> out</div></pre></td></tr></table></figure></p>
<h2 id="多层神经网络"><a href="#多层神经网络" class="headerlink" title="多层神经网络"></a>多层神经网络</h2><p>如果在神经网络中还存在隐藏层，也即中间层，其功效将会大大增加，理论推导类似。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;神经网络的理论与python实现&lt;br&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="https://thuxuxs.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>GD_and_SGD</title>
    <link href="https://thuxuxs.github.io/2017/03/13/GD-and-SGD/"/>
    <id>https://thuxuxs.github.io/2017/03/13/GD-and-SGD/</id>
    <published>2017-03-13T20:05:18.000Z</published>
    <updated>2017-03-15T06:17:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>机器学习中的梯度下降算法和随机梯度下降算法<br><a id="more"></a></p>
<h2 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h2><p>n个样本点$(x_i,y_i)$，待拟合的函数为$h(x,w)$，其中$w$为函数的参数，误差函数为$J(w)=\sum_i (y_i-h(x_i,w))^2/2$，我们的任务是找出参数$w$，使得误差函数最小。沿着误差函数的负梯度方向改变参数即可。<br>$$\begin{aligned}<br>w&amp;:=w-\eta\nabla J\\<br>&amp;:=w+\eta\sum_i(y_i-h(x_i,w))\nabla h(x_i,w)<br>\end{aligned}$$<br>其中$\eta$为学习速度。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(w1,w2,_fun,p)</span>:</span></div><div class="line">    x=array(linspace(<span class="number">-10</span>,<span class="number">10</span>,<span class="number">100</span>))</div><div class="line">    r=array((random_sample(len(x))<span class="number">-0.5</span>)*<span class="number">2</span>)</div><div class="line">    y=_fun(x,p)+r</div><div class="line">    <span class="keyword">return</span> x,y</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x,p)</span>:</span></div><div class="line">    w1,w2=p</div><div class="line">    <span class="keyword">return</span> w1+w2*x</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">jcb</span><span class="params">(x,p)</span>:</span></div><div class="line">    w1,w2=p</div><div class="line">    out=zeros([len(x),len(p)])</div><div class="line">    out[:,<span class="number">0</span>]=<span class="number">1</span></div><div class="line">    out[:,<span class="number">1</span>]=x</div><div class="line">    <span class="keyword">return</span> out</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gd</span><span class="params">(x,y,_fun,_jcb,eta)</span>:</span></div><div class="line">    p=array([<span class="number">0</span>,<span class="number">0</span>])</div><div class="line">    pp=[]</div><div class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> range(<span class="number">200</span>):</div><div class="line">        p=p+eta*dot(y-_fun(x,p),jcb(x,p))</div><div class="line">        pp.append(p)</div><div class="line">        <span class="comment"># plot(x,fun(x,p),label=str(step))</span></div><div class="line">    <span class="keyword">return</span> p,array(pp)</div><div class="line"></div><div class="line">w1=<span class="number">3</span></div><div class="line">w2=<span class="number">1.5</span></div><div class="line">x,y=generate(w1,w2,fun,[w1,w2])</div><div class="line">p,pp=gd(x,y,fun,jcb,<span class="number">0.0003</span>)</div><div class="line"><span class="keyword">print</span> p</div><div class="line"></div><div class="line"></div><div class="line">subplot(<span class="number">121</span>)</div><div class="line">plot(x,y,<span class="string">'.'</span>)</div><div class="line">plot(x,fun(x,p))</div><div class="line"></div><div class="line">subplot(<span class="number">122</span>)</div><div class="line">plot(pp[:,<span class="number">0</span>],pp[:,<span class="number">1</span>],<span class="string">'o'</span>)</div><div class="line">plot(w1,w2,<span class="string">'rx'</span>,ms=<span class="number">12</span>)</div><div class="line"><span class="comment"># legend()</span></div><div class="line">show()</div></pre></td></tr></table></figure></p>
<h2 id="随机梯度下降"><a href="#随机梯度下降" class="headerlink" title="随机梯度下降"></a>随机梯度下降</h2><p>在上面递归迭代时，所取的求和不去全部而是取一个随机的集合$A$<br>$$\begin{aligned}<br>w&amp;:=w-\eta\nabla J\\<br>&amp;:=w+\eta\sum_{i\in A}(y_i-h(x_i,w))\nabla h(x_i,w)<br>\end{aligned}$$</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(w1,w2,_fun,p)</span>:</span></div><div class="line">    x=array(linspace(<span class="number">-10</span>,<span class="number">10</span>,<span class="number">100</span>))</div><div class="line">    r=array((random_sample(len(x))<span class="number">-0.5</span>)*<span class="number">0.2</span>)</div><div class="line">    y=_fun(x,p)+r</div><div class="line">    <span class="keyword">return</span> x,y</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gd</span><span class="params">(x,y,_fun,_jcb,eta)</span>:</span></div><div class="line">    p=array([<span class="number">1</span>,<span class="number">1</span>])</div><div class="line">    pp=[]</div><div class="line">    mini_batch=<span class="number">20</span></div><div class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> range(<span class="number">500</span>):</div><div class="line">        samp=random.sample(xrange(len(x)),mini_batch)</div><div class="line">        <span class="comment"># p=p+eta*dot((y-_fun(x,p)),(jcb(x,p)))</span></div><div class="line">        p=p+eta*dot((y-_fun(x,p))[samp],(jcb(x,p))[samp])</div><div class="line">        pp.append(p)</div><div class="line">        <span class="comment"># plot(x,fun(x,p),label=str(step))</span></div><div class="line">    <span class="keyword">return</span> p,array(pp)</div><div class="line"></div><div class="line"><span class="comment"># def fun(x,p):</span></div><div class="line"><span class="comment">#     w1,w2=p</span></div><div class="line"><span class="comment">#     return w1+w2*x</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># def jcb(x,p):</span></div><div class="line"><span class="comment">#     w1,w2=p</span></div><div class="line"><span class="comment">#     out=zeros([len(x),len(p)])</span></div><div class="line"><span class="comment">#     out[:,0]=1</span></div><div class="line"><span class="comment">#     out[:,1]=x</span></div><div class="line"><span class="comment">#     return out</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x,p)</span>:</span></div><div class="line">    w1,w2=p</div><div class="line">    <span class="keyword">return</span> w1*x+w2*x**<span class="number">2</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">jcb</span><span class="params">(x,p)</span>:</span></div><div class="line">    w1,w2=p</div><div class="line">    out=zeros([len(x),len(p)])</div><div class="line">    out[:,<span class="number">0</span>]=x</div><div class="line">    out[:,<span class="number">1</span>]=x**<span class="number">2</span></div><div class="line">    <span class="keyword">return</span> out</div><div class="line"></div><div class="line"><span class="comment"># def fun(x,p):</span></div><div class="line"><span class="comment">#     w1,w2=p</span></div><div class="line"><span class="comment">#     return w1*sin(w2*x)</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># def jcb(x,p):</span></div><div class="line"><span class="comment">#     w1,w2=p</span></div><div class="line"><span class="comment">#     out=zeros([len(x),len(p)])</span></div><div class="line"><span class="comment">#     out[:,0]=sin(w2*x)</span></div><div class="line"><span class="comment">#     out[:,1]=w1*x*cos(w2*x)</span></div><div class="line"><span class="comment">#     return out</span></div><div class="line"></div><div class="line">w1=<span class="number">3</span></div><div class="line">w2=<span class="number">1.5</span></div><div class="line">x,y=generate(w1,w2,fun,[w1,w2])</div><div class="line">p,pp=gd(x,y,fun,jcb,<span class="number">0.00003</span>)</div><div class="line"><span class="keyword">print</span> p</div><div class="line"></div><div class="line"></div><div class="line">subplot(<span class="number">121</span>)</div><div class="line">plot(x,y,<span class="string">'.'</span>)</div><div class="line">plot(x,fun(x,p))</div><div class="line"></div><div class="line">subplot(<span class="number">122</span>)</div><div class="line">plot(pp[:,<span class="number">0</span>],pp[:,<span class="number">1</span>],<span class="string">'o'</span>)</div><div class="line">plot(w1,w2,<span class="string">'rx'</span>,ms=<span class="number">12</span>)</div><div class="line"><span class="comment"># legend()</span></div><div class="line">show()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;机器学习中的梯度下降算法和随机梯度下降算法&lt;br&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="https://thuxuxs.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>设计资源</title>
    <link href="https://thuxuxs.github.io/2017/02/13/%E8%AE%BE%E8%AE%A1%E8%B5%84%E6%BA%90/"/>
    <id>https://thuxuxs.github.io/2017/02/13/设计资源/</id>
    <published>2017-02-13T21:30:11.000Z</published>
    <updated>2017-02-13T21:31:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>一些有用的设计资源<br><a id="more"></a></p>
<h1 id="awesome-design-cn"><a href="#awesome-design-cn" class="headerlink" title="awesome-design-cn"></a>awesome-design-cn</h1><p>设计师资源大全由<a href="http://www.jobbole.com" target="_blank" rel="external">伯乐在线</a>资源频道综合整理。目前已收录 340+ 设计类资源，包含：<a href="http://hao.jobbole.com/category/design/icon-design/" target="_blank" rel="external">ICON图标</a>、<a href="http://hao.jobbole.com/category/design/logo-design/" target="_blank" rel="external">Logo设计</a>、<a href="http://hao.jobbole.com/category/design/photoshop-plug-in/" target="_blank" rel="external">PhotoShop插件</a>、<a href="http://hao.jobbole.com/category/design/interactive-design-tools/" target="_blank" rel="external">交互设计工具</a>、<a href="http://hao.jobbole.com/category/design/flow-chart/" target="_blank" rel="external">流程图</a>、<a href="http://hao.jobbole.com/category/design/design-wireframe/" target="_blank" rel="external">线框图/原型图</a>、<a href="http://hao.jobbole.com/category/design/design-blog/" target="_blank" rel="external">设计博客</a>、<a href="http://hao.jobbole.com/category/design/design-tools-design/" target="_blank" rel="external">设计工具</a><a href="http://hao.jobbole.com/category/design/design-guide/" target="_blank" rel="external">设计教程</a>、<a href="http://hao.jobbole.com/category/design/design-sucai/" target="_blank" rel="external">设计素材</a>、<a href="http://hao.jobbole.com/category/design/design-color/" target="_blank" rel="external">配色方案</a>、<a href="http://hao.jobbole.com/category/design/design-photo/" target="_blank" rel="external">高清图库</a>等等。</p>
<h2 id="如何加入我们？"><a href="#如何加入我们？" class="headerlink" title="如何加入我们？"></a>如何加入我们？</h2><p>非常期待能有更多朋友一起来参与。加入前，有几个小要求：</p>
<ul>
<li>对设计感兴趣，如果在从事这方面工作更好；</li>
<li>如果您的英文还不错，那也非常好啦；（这个不强制要求）</li>
</ul>
<p>如有兴趣，请加 QQ：191250436。加 Q 时请注明「设计资源」</p>
<p><strong>我们还在翻译国外的优秀设计文章，如果您有一定的设计背景和英文基础，欢迎<a href="http://group.jobbole.com/category/feedback/trans-team/" target="_blank" rel="external">从这里申请加入我们</a>。</strong></p>
<h2 id="本项目的参与者"><a href="#本项目的参与者" class="headerlink" title="本项目的参与者"></a>本项目的参与者</h2><p>ㄨiaǒ偉、shanlijie001、rose、梦熙、布洛、</p>
<p>注：名单不分排名，不定期补充更新</p>
<h2 id="奖励计划"><a href="#奖励计划" class="headerlink" title="奖励计划"></a>奖励计划</h2><p>虽然奖励可能并不是你加入的主要原因，但还是有必要提一下：</p>
<ul>
<li>整理超过 20 个资源后，可在伯乐在线上开通打赏；</li>
<li>每整理 20 个资源，有机会获得技术书籍或各种有意思的创意、极客产品；</li>
<li><a href="http://hao.jobbole.com/rewards/" target="_blank" rel="external">奖励详情</a></li>
</ul>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="ICON图标"><a href="#ICON图标" class="headerlink" title="ICON图标"></a>ICON图标</h3><ul>
<li><a href="http://hao.jobbole.com/fontello/" target="_blank" rel="external">Fontello</a>：图标字体生成器</li>
<li><a href="http://hao.jobbole.com/the-noun-project/" target="_blank" rel="external">The Noun Project</a>：免费提供高度可辨识符号图标</li>
<li><a href="http://hao.jobbole.com/iconarchive/" target="_blank" rel="external">IconArchive</a>：专业图标搜索引擎</li>
<li><a href="http://hao.jobbole.com/iconify/" target="_blank" rel="external">iConify</a>：Mac平台的苹果应用图标自动化生成工具</li>
<li><a href="http://hao.jobbole.com/iconbench/" target="_blank" rel="external">Iconbench</a>：在线ICON素材图标制作工具</li>
<li><a href="http://hao.jobbole.com/easyicon/" target="_blank" rel="external">EasyIcon</a>：免费图标搜索和下载平台</li>
<li><a href="http://hao.jobbole.com/icon-deposit/" target="_blank" rel="external">Icon Deposit</a>：一个奇妙的图标下载站</li>
</ul>
<h3 id="Logo-设计"><a href="#Logo-设计" class="headerlink" title="Logo 设计"></a>Logo 设计</h3><ul>
<li><a href="http://hao.jobbole.com/logaster/" target="_blank" rel="external">Logaster</a>：教你在线几分钟内搞定专业的LOGO设计</li>
<li><a href="http://hao.jobbole.com/logolounge/" target="_blank" rel="external">LogoLounge</a>：国际知名的LOGO设计权威网站</li>
<li><a href="http://hao.jobbole.com/logomoose/" target="_blank" rel="external">LogoMoose</a>：一个优秀的logo素材站点</li>
<li><a href="http://hao.jobbole.com/logopond/" target="_blank" rel="external">LogoPond</a>：LOGO设计作品收藏网</li>
<li><a href="http://hao.jobbole.com/brand-new/" target="_blank" rel="external">BRAND NEW</a>：资源丰富的Logo设计网站</li>
<li><a href="http://hao.jobbole.com/logoed/" target="_blank" rel="external">LOGOED</a>：一个展示Logo设计的博客</li>
<li><a href="http://hao.jobbole.com/logospire/" target="_blank" rel="external">LOGOSPIRE</a>：logo设计的交流平台</li>
<li><a href="http://hao.jobbole.com/logo-of-the-day/" target="_blank" rel="external">Logo of the Day</a>：汇集世界各地优秀LOGO作品的站点</li>
<li><a href="http://hao.jobbole.com/logodesignlove/" target="_blank" rel="external">LogoDesignLove</a>：Logo设计技巧分享网</li>
<li><a href="http://hao.jobbole.com/brandseen/" target="_blank" rel="external">Brandseen</a>：匹配流行品牌LOGO颜色的在线游戏</li>
</ul>
<h3 id="Photoshop插件"><a href="#Photoshop插件" class="headerlink" title="Photoshop插件"></a>Photoshop插件</h3><ul>
<li><a href="http://hao.jobbole.com/retinize/" target="_blank" rel="external">Retinize</a>：iOS切图神器</li>
<li><a href="http://hao.jobbole.com/guideguide/" target="_blank" rel="external">GuideGuide</a>：一款PS参考线插件</li>
<li><a href="http://hao.jobbole.com/divine-proportions-toolkit/" target="_blank" rel="external">Divine Proportions Toolkit</a>：黄金分割工具</li>
<li><a href="http://hao.jobbole.com/kockout/" target="_blank" rel="external">Kockout</a>：PS抠图神器</li>
<li><a href="http://hao.jobbole.com/coolors/" target="_blank" rel="external">Coolors</a>：自动生成配色色板的小工具</li>
<li><a href="http://hao.jobbole.com/assistor-ps/" target="_blank" rel="external">Assistor PS</a>：一个功能强大的PS辅助工具</li>
<li><a href="http://hao.jobbole.com/flexify-2/" target="_blank" rel="external">Flexify 2</a>：PS变形滤镜插件</li>
<li><a href="http://hao.jobbole.com/devrocket/" target="_blank" rel="external">DevRocket</a>：一款iOS UI设计效率工具</li>
<li><a href="http://hao.jobbole.com/slicy/" target="_blank" rel="external">Slicy</a>：Mac下的切图神器</li>
<li><a href="http://hao.jobbole.com/kuler/" target="_blank" rel="external">Kuler</a>：Adobe的配色工具</li>
</ul>
<h3 id="交互设计工具"><a href="#交互设计工具" class="headerlink" title="交互设计工具"></a>交互设计工具</h3><ul>
<li><a href="http://hao.jobbole.com/vxplo/" target="_blank" rel="external">VXPLO</a>：专业的HTML5编辑工具</li>
<li><a href="http://hao.jobbole.com/epub360/" target="_blank" rel="external">Epub360</a>：专业级H5交互设计工具</li>
<li><a href="http://hao.jobbole.com/indigo-studio/" target="_blank" rel="external">Indigo Studio</a>：UI原型设计和交互设计工具</li>
<li><a href="http://hao.jobbole.com/avocado/" target="_blank" rel="external">Avocado</a>：无需编码的跟设计原型进行交互</li>
<li><a href="http://hao.jobbole.com/webflow/" target="_blank" rel="external">Webflow</a>：傻瓜式网页设计制作平台</li>
<li><a href="http://hao.jobbole.com/marvel/" target="_blank" rel="external">Marvel</a>：更专注交互动作的在线工具</li>
<li><a href="http://hao.jobbole.com/principle/" target="_blank" rel="external">Principle</a>：Mac平台交互动效设计神器</li>
<li><a href="http://hao.jobbole.com/quartz-composer/" target="_blank" rel="external">Quartz Composer</a>：图形化的编程工具</li>
<li><a href="http://hao.jobbole.com/form/" target="_blank" rel="external">Form</a>：交互原型设计工具</li>
<li><a href="http://hao.jobbole.com/pixate/" target="_blank" rel="external">Pixate</a>：设计师的免费动效神器</li>
<li><a href="http://hao.jobbole.com/framer-js/" target="_blank" rel="external">Framer.js</a>：一个交互原型设计框架</li>
<li><a href="http://hao.jobbole.com/keynote/" target="_blank" rel="external">Keynote</a>：快速制作高保真交互原型</li>
<li><a href="http://hao.jobbole.com/origami/" target="_blank" rel="external">ORIGAMI</a>：交互神器-图像设计动画合成工具</li>
<li><a href="http://hao.jobbole.com/invision/" target="_blank" rel="external">InVision</a>：便捷的产品原型生成工具</li>
</ul>
<h3 id="流程图-脑图"><a href="#流程图-脑图" class="headerlink" title="流程图/脑图"></a>流程图/脑图</h3><ul>
<li><a href="http://hao.jobbole.com/processon/" target="_blank" rel="external">ProcessOn</a>：免费的在线作图、实时协作工具</li>
<li><a href="http://hao.jobbole.com/drawanywhere/" target="_blank" rel="external">DrawAnywhere</a>：在线流程图制作工具</li>
<li><a href="http://hao.jobbole.com/lovely-charts/" target="_blank" rel="external">Lovely Charts</a>：功能强大的在线图表制作工具</li>
<li><a href="http://hao.jobbole.com/creately/" target="_blank" rel="external">Creately</a>：优秀的绘制产品图形的在线工具</li>
<li><a href="http://hao.jobbole.com/cacoo/" target="_blank" rel="external">Cacoo</a>：在线简单易用的网络画图工具</li>
<li><a href="http://hao.jobbole.com/lucidchart/" target="_blank" rel="external">LucidChart</a>：在线流程图绘制和协作应用平台</li>
<li><a href="http://hao.jobbole.com/gliffy/" target="_blank" rel="external">Gliffy</a>：在线免费流程图制作工具</li>
<li><a href="http://hao.jobbole.com/novamind/" target="_blank" rel="external">NovaMind</a>：非常优秀的思维导图软件</li>
<li><a href="http://hao.jobbole.com/mindmapper/" target="_blank" rel="external">MindMapper</a>：专业的可视化脑图管理工具</li>
<li><a href="http://hao.jobbole.com/freemind/" target="_blank" rel="external">FreeMind</a>：免费的思维导图软件</li>
<li><a href="http://hao.jobbole.com/xmind/" target="_blank" rel="external">XMind</a>：非常实用的商业思维导图软件</li>
<li><a href="http://hao.jobbole.com/mindmanager/" target="_blank" rel="external">MindManager</a>：专业思维导图工具</li>
<li><a href="http://hao.jobbole.com/%e7%99%be%e5%ba%a6%e8%84%91%e5%9b%be/" target="_blank" rel="external">百度脑图</a>：便捷的思维编辑工具</li>
</ul>
<h3 id="灵感酷站"><a href="#灵感酷站" class="headerlink" title="灵感酷站"></a>灵感酷站</h3><ul>
<li><a href="http://hao.jobbole.com/sketchrepo/" target="_blank" rel="external">Sketchrepo</a>：免费高品质的Sketch资源</li>
<li><a href="http://hao.jobbole.com/psdrepo/" target="_blank" rel="external">Psdrepo</a>：免费高品质的PSD资源</li>
<li><a href="http://hao.jobbole.com/1x/" target="_blank" rel="external">1X</a>：一个优秀的摄影作品网站</li>
<li><a href="http://hao.jobbole.com/magdeleine/" target="_blank" rel="external">Magdeleine</a>：免费高清灵感图片网</li>
<li><a href="http://hao.jobbole.com/we-heart-it/" target="_blank" rel="external">We Heart It</a>：每天发现充满灵感且美丽的图片</li>
<li><a href="http://hao.jobbole.com/pinspire/" target="_blank" rel="external">PinSpire</a>：灵感创意作品收集平台</li>
<li><a href="http://hao.jobbole.com/notcot/" target="_blank" rel="external">NotCot</a>：一个集视觉效果、美学为一体的网站</li>
<li><a href="http://hao.jobbole.com/9gag/" target="_blank" rel="external">9GAG</a>：全球最搞笑的趣图网站</li>
<li><a href="http://hao.jobbole.com/booooooom/" target="_blank" rel="external">BoooooooM</a>：设计简约但内容丰富的博客</li>
<li><a href="http://hao.jobbole.com/illusion/" target="_blank" rel="external">illusion</a>：展示最惊人的创意图片</li>
<li><a href="http://hao.jobbole.com/baubauhaus/" target="_blank" rel="external">Baubauhaus</a>：提供设计灵感、插画摄影等艺术作品</li>
<li><a href="http://hao.jobbole.com/niice/" target="_blank" rel="external">Niice</a>：设计师必备的灵感搜索引擎</li>
<li><a href="http://hao.jobbole.com/deviantart/" target="_blank" rel="external">DeviantArt</a>：最大的艺术和设计社区</li>
<li><a href="http://hao.jobbole.com/%e8%8a%b1%e7%93%a3%e7%bd%91/" target="_blank" rel="external">花瓣网</a>：设计师寻找灵感的天堂</li>
<li><a href="http://hao.jobbole.com/pixiv/" target="_blank" rel="external">pixiv</a>：日本同人画、插画作品分享站点</li>
<li><a href="http://hao.jobbole.com/awwwards/" target="_blank" rel="external">Awwwards</a>：最佳网页设计展示平台</li>
<li><a href="http://hao.jobbole.com/wallhaven/" target="_blank" rel="external">WallHaven</a>：高清壁纸图片搜索引擎</li>
<li><a href="http://hao.jobbole.com/pinterest/" target="_blank" rel="external">Pinterest</a>：图片分享类的社交网站</li>
<li><a href="http://hao.jobbole.com/abduzeedo/" target="_blank" rel="external">Abduzeedo</a>：一家集创意灵感和教程的设计博客</li>
<li><a href="http://hao.jobbole.com/yanko-design/" target="_blank" rel="external">Yanko Design</a>：最棒的现代工业设计站点</li>
<li><a href="http://hao.jobbole.com/swissmiss/" target="_blank" rel="external">SwissMiss</a>：分享创意设计的网站</li>
<li><a href="http://hao.jobbole.com/petapixel/" target="_blank" rel="external">PetaPixel</a>：专业的摄影爱好者点评博客</li>
<li><a href="http://hao.jobbole.com/365psd/" target="_blank" rel="external">365PSD</a>：免费psd图片素材下载网站</li>
<li><a href="http://hao.jobbole.com/typophile/" target="_blank" rel="external">Typophile</a>：字体设计艺术网站</li>
<li><a href="http://hao.jobbole.com/patterntap/" target="_blank" rel="external">Patterntap</a>：适合用户界面设计和图案感兴趣的同学</li>
<li><a href="http://hao.jobbole.com/designshack/" target="_blank" rel="external">Designshack</a>：设计作品欣赏网站</li>
<li><a href="http://hao.jobbole.com/behance/" target="_blank" rel="external">Behance</a>：全球领先的专业创意平台</li>
<li><a href="http://hao.jobbole.com/dribbble/" target="_blank" rel="external">Dribbble</a>：设计师必备网站之一</li>
<li><a href="http://hao.jobbole.com/ffffound/" target="_blank" rel="external">FFFFound</a>：专业的图片收藏网</li>
<li><a href="http://hao.jobbole.com/mymodernmet/" target="_blank" rel="external">MyModernmet</a>：众多艺术家不可或缺的信息来源</li>
<li><a href="http://hao.jobbole.com/grain-edit/" target="_blank" rel="external">Grain Edit</a>：复古和古典风格的设计内容</li>
<li><a href="http://hao.jobbole.com/uiparade/" target="_blank" rel="external">UIparade</a>：灵感UI设计作品分享网站</li>
<li><a href="http://hao.jobbole.com/muuuuu/" target="_blank" rel="external">Muuuuu</a>：日本网站画廊，收集最具创意网站</li>
<li><a href="http://hao.jobbole.com/ikesai/" target="_blank" rel="external">iKesai</a>：网页设计作品案例库</li>
<li><a href="http://hao.jobbole.com/css-winner/" target="_blank" rel="external">CSS Winner</a>：网站设计资源站点</li>
</ul>
<h3 id="线框图-原型图"><a href="#线框图-原型图" class="headerlink" title="线框图/原型图"></a>线框图/原型图</h3><ul>
<li><a href="http://hao.jobbole.com/prott/" target="_blank" rel="external">Prott</a>：移动测试原型制作工具</li>
<li><a href="http://hao.jobbole.com/solidify/" target="_blank" rel="external">Solidify</a>：一款原型制作软件</li>
<li><a href="http://hao.jobbole.com/processon/" target="_blank" rel="external">ProcessOn</a>：免费的在线作图、实时协作工具</li>
<li><a href="http://hao.jobbole.com/mockingbird/" target="_blank" rel="external">Mockingbird</a>：一个基于 Web 的在线原型设计平台</li>
<li><a href="http://hao.jobbole.com/creately/" target="_blank" rel="external">Creately</a>：优秀的绘制产品图形的在线工具</li>
<li><a href="http://hao.jobbole.com/cacoo/" target="_blank" rel="external">Cacoo</a>：在线简单易用的网络画图工具</li>
<li><a href="http://hao.jobbole.com/gliffy/" target="_blank" rel="external">Gliffy</a>：在线免费流程图制作工具</li>
<li><a href="http://hao.jobbole.com/indigo-studio/" target="_blank" rel="external">Indigo Studio</a>：UI原型设计和交互设计工具</li>
<li><a href="http://hao.jobbole.com/%e5%a2%a8%e5%88%80mockingbot/" target="_blank" rel="external">墨刀MockingBot</a>：免费的移动应用原型与线框图工具</li>
<li><a href="http://hao.jobbole.com/marvel/" target="_blank" rel="external">Marvel</a>：更专注交互动作的在线工具</li>
<li><a href="http://hao.jobbole.com/keynote/" target="_blank" rel="external">Keynote</a>：快速制作高保真交互原型</li>
<li><a href="http://hao.jobbole.com/omnigraffle-2/" target="_blank" rel="external">OmniGraffle</a>：Mac平台下最好的原型设计工具</li>
<li><a href="http://hao.jobbole.com/handmade-sketches/" target="_blank" rel="external">Handmade Sketches</a>：手工草图绘制工具</li>
<li><a href="http://hao.jobbole.com/mockups-me/" target="_blank" rel="external">Mockups.me</a>：ui线框图软件</li>
<li><a href="http://hao.jobbole.com/live-wire/" target="_blank" rel="external">Live wire</a>：iPad上的线框图制作工具</li>
<li><a href="http://hao.jobbole.com/uxtoolbox/" target="_blank" rel="external">UXToolbox</a>：Window平台的线框图工具</li>
<li><a href="http://hao.jobbole.com/devrocket/" target="_blank" rel="external">DevRocket</a>：一款iOS UI设计效率工具</li>
<li><a href="http://hao.jobbole.com/appcooker/" target="_blank" rel="external">AppCooker</a>：从图标草图到原型设计的iPad应用</li>
<li><a href="http://hao.jobbole.com/blueprint/" target="_blank" rel="external">Blueprint</a>：你轻而易举地设计原型的iPad应用</li>
<li><a href="http://hao.jobbole.com/mockplus%e6%91%a9%e5%ae%a2/" target="_blank" rel="external">Mockplus摩客</a>：简洁高效的原型图设计工具</li>
<li><a href="http://hao.jobbole.com/pencil-project/" target="_blank" rel="external">Pencil Project</a>：制作图表和GUI原型的工具</li>
<li><a href="http://hao.jobbole.com/iplotz/" target="_blank" rel="external">iPlotz</a>：用来创建可点击、可导航的原型和线框图工具</li>
<li><a href="http://hao.jobbole.com/mokk-me/" target="_blank" rel="external">Mokk.me</a>：一个简单快速的原型工具</li>
<li><a href="http://hao.jobbole.com/invision/" target="_blank" rel="external">InVision</a>：便捷的产品原型生成工具</li>
<li><a href="http://hao.jobbole.com/hotgloo/" target="_blank" rel="external">HotGloo</a>：功能强大的产品原型在线工具</li>
<li><a href="http://hao.jobbole.com/iphone-mockup/" target="_blank" rel="external">iPhone Mockup</a>：非常简单的在线原型工具</li>
<li><a href="http://hao.jobbole.com/flairbuilder/" target="_blank" rel="external">FlairBuilder</a>：用来创建交互性线框图的快速原型工具</li>
<li><a href="http://hao.jobbole.com/pidoco/" target="_blank" rel="external">Pidoco</a>：一款基于Web的原型设计软件</li>
<li><a href="http://hao.jobbole.com/omnigraffle/" target="_blank" rel="external">Omnigraffle</a>：用来快速绘制线框图、图表、流程图等</li>
<li><a href="http://hao.jobbole.com/wireframesketcher/" target="_blank" rel="external">WireframeSketcher</a>：灵活的线框图和原型快速创作工具</li>
<li><a href="http://hao.jobbole.com/protoshare/" target="_blank" rel="external">Protoshare</a>：十分便捷的在线原型制作工具</li>
<li><a href="http://hao.jobbole.com/mockflow/" target="_blank" rel="external">MockFlow</a>：制作产品原型的在线工具</li>
<li><a href="http://hao.jobbole.com/balsamiq-mockups/" target="_blank" rel="external">Balsamiq Mockups</a>：基于Flash的快速制作线框图工具</li>
<li><a href="http://hao.jobbole.com/proto-io/" target="_blank" rel="external">Proto.io</a>：一个专用的手机原型开发平台</li>
<li><a href="http://hao.jobbole.com/axure-rp/" target="_blank" rel="external">Axure RP</a>：专业的快速原型设计工具</li>
<li><a href="http://hao.jobbole.com/wireframe-cc/" target="_blank" rel="external">Wireframe.cc</a>：在线线框图绘制工具</li>
<li><a href="http://hao.jobbole.com/powermockup/" target="_blank" rel="external">PowerMockup </a>：把微软的PPT文件直接变成线框图工具</li>
<li><a href="http://hao.jobbole.com/uxpin/" target="_blank" rel="external">UXPin</a>：实体模型和在线可点击原型创作工具</li>
<li><a href="http://hao.jobbole.com/fluid-ui/" target="_blank" rel="external">Fluid UI</a>：用于移动开发的Web原型设计工具</li>
<li><a href="http://hao.jobbole.com/moqups/" target="_blank" rel="external">Mockup</a>：在线线框图工具</li>
<li><a href="http://hao.jobbole.com/justinmind/" target="_blank" rel="external">justinmind</a>：产品原型设计工具</li>
</ul>
<h3 id="设计博客"><a href="#设计博客" class="headerlink" title="设计博客"></a>设计博客</h3><ul>
<li><a href="http://hao.jobbole.com/booooooom/" target="_blank" rel="external">BoooooooM</a>：设计简约但内容丰富的博客</li>
<li><a href="http://hao.jobbole.com/logoed/" target="_blank" rel="external">LOGOED</a>：一个展示Logo设计的博客</li>
<li><a href="http://hao.jobbole.com/abduzeedo/" target="_blank" rel="external">Abduzeedo</a>：一家集创意灵感和教程的设计博客</li>
<li><a href="http://hao.jobbole.com/swissmiss/" target="_blank" rel="external">SwissMiss</a>：分享创意设计的网站</li>
<li><a href="http://hao.jobbole.com/the-industry/" target="_blank" rel="external">The Industry</a>：学习平面设计的极佳出版物</li>
<li><a href="http://hao.jobbole.com/net-magazine/" target="_blank" rel="external">Net Magazine</a>：文章覆盖面广，适合扩宽眼界</li>
<li><a href="http://hao.jobbole.com/web-designer-depot/" target="_blank" rel="external">Web Designer Depot</a>：适合视觉设计人员专注</li>
<li><a href="http://hao.jobbole.com/design-modo/" target="_blank" rel="external">Design Modo</a>：偏于设计前沿和设计趋势的博客</li>
<li><a href="http://hao.jobbole.com/lukew/" target="_blank" rel="external">Lukew</a>：干货文章分享，资深的用户体验专家</li>
<li><a href="http://hao.jobbole.com/ux-magazine/" target="_blank" rel="external">UX Magazine</a>：善于用通俗的案例讲解理论知识</li>
<li><a href="http://hao.jobbole.com/uxbooth/" target="_blank" rel="external">UXbooth</a>：专注于用户体验设计文章</li>
<li><a href="http://hao.jobbole.com/smashing-magazine/" target="_blank" rel="external">Smashing Magazine</a>：整体质量很高的设计文章</li>
<li><a href="http://hao.jobbole.com/the-great-discontent/" target="_blank" rel="external">The Great Discontent</a>：提供世界顶尖创意者的漫长访谈</li>
</ul>
<h3 id="设计工具"><a href="#设计工具" class="headerlink" title="设计工具"></a>设计工具</h3><ul>
<li><a href="http://hao.jobbole.com/one-css-grid/" target="_blank" rel="external">One% CSS Grid</a>：一款基于百分比的CSS响应式框架</li>
<li><a href="http://hao.jobbole.com/simple-grid/" target="_blank" rel="external">Simple Grid</a>：轻量级的响应式 CSS 网格系统</li>
<li><a href="http://hao.jobbole.com/iconify-2/" target="_blank" rel="external">Iconify</a>：一个作品网站平台</li>
<li><a href="http://hao.jobbole.com/iconify/" target="_blank" rel="external">iConify</a>：Mac平台的苹果应用图标自动化生成工具</li>
<li><a href="http://hao.jobbole.com/viewport-resizer/" target="_blank" rel="external">Viewport Resizer</a>：一个测试响应式设计的小书签</li>
<li><a href="http://hao.jobbole.com/divshot/" target="_blank" rel="external">Divshot</a>：在线的可视化网页设计工具</li>
<li><a href="http://hao.jobbole.com/bootply/" target="_blank" rel="external">Bootply</a>：一款很棒的 Bootstrap UI 编辑工具</li>
<li><a href="http://hao.jobbole.com/jetstrap/" target="_blank" rel="external">Jetstrap</a>：Bootstrap框架的可视化制作工具</li>
<li><a href="http://hao.jobbole.com/layoutit/" target="_blank" rel="external">Layoutit</a>：在线搭建Bootstrap响应式布局的工具</li>
<li><a href="http://hao.jobbole.com/bonsai-2/" target="_blank" rel="external">Bonsai</a>：一套轻量级的JavaScript绘图库</li>
<li><a href="http://hao.jobbole.com/bootsnipp/" target="_blank" rel="external">Bootsnipp</a>：针对Web设计师和开发者的前端元素库</li>
<li><a href="http://hao.jobbole.com/simplytestable/" target="_blank" rel="external">SimplyTestable</a>：一款自动的前端网页测试工具</li>
<li><a href="http://hao.jobbole.com/onlytasks/" target="_blank" rel="external">Onlytasks</a>：支持双向同步的Evernote效率工具</li>
<li><a href="http://hao.jobbole.com/rwdgrid/" target="_blank" rel="external">rwdgrid</a>：基于960grid的响应式网格系统</li>
<li><a href="http://hao.jobbole.com/iconbench/" target="_blank" rel="external">Iconbench</a>：在线ICON素材图标制作工具</li>
<li><a href="http://hao.jobbole.com/photo-raster/" target="_blank" rel="external">Photo Raster</a>：在线免费图片编辑美化工具</li>
<li><a href="http://hao.jobbole.com/manymo/" target="_blank" rel="external">Manymo</a>：在线安卓系统模拟器工具</li>
<li><a href="http://hao.jobbole.com/sellbox/" target="_blank" rel="external">Sellbox</a>：可以通过Dropbox账户售卖你的数字文档</li>
<li><a href="http://hao.jobbole.com/rightfont/" target="_blank" rel="external">RightFont</a>：超好用的字体管理工具</li>
<li><a href="http://hao.jobbole.com/wobzip/" target="_blank" rel="external">Wobzip</a>：提供在线解压缩文件的网站</li>
<li><a href="http://hao.jobbole.com/archive-today/" target="_blank" rel="external">Archive.Today</a>：一个网页快照捕捉工具</li>
<li><a href="http://hao.jobbole.com/minigrid/" target="_blank" rel="external">Minigrid</a>：简约漂亮的网页布局栅格系统</li>
<li><a href="http://hao.jobbole.com/background-burner/" target="_blank" rel="external">Background Burner</a>：简单的在线抠图工具</li>
<li><a href="http://hao.jobbole.com/cloudconvert/" target="_blank" rel="external">CloudConvert</a>：在线免费的万能文件格式转换器</li>
<li><a href="http://hao.jobbole.com/lovely-charts/" target="_blank" rel="external">Lovely Charts</a>：功能强大的在线图表制作工具</li>
<li><a href="http://hao.jobbole.com/cacoo/" target="_blank" rel="external">Cacoo</a>：在线简单易用的网络画图工具</li>
<li><a href="http://hao.jobbole.com/incogna/" target="_blank" rel="external">Incogna</a>：相似图片搜索引擎</li>
<li><a href="http://hao.jobbole.com/picitup/" target="_blank" rel="external">Picitup</a>：在线相似图片搜索引擎</li>
<li><a href="http://hao.jobbole.com/pincap/" target="_blank" rel="external">PinCap</a>：图片资源收集管理工具</li>
<li><a href="http://hao.jobbole.com/tineye/" target="_blank" rel="external">TinEye</a>：以图搜图的反向图片搜索引擎</li>
<li><a href="http://hao.jobbole.com/giphy/" target="_blank" rel="external">Giphy</a>：专搜GIF动态图的搜索引擎</li>
<li><a href="http://hao.jobbole.com/librestock/" target="_blank" rel="external">LibreStock</a>：一站搜寻二十个常用的图库网站</li>
<li><a href="http://hao.jobbole.com/assistor-ps/" target="_blank" rel="external">Assistor PS</a>：一个功能强大的PS辅助工具</li>
<li><a href="http://hao.jobbole.com/paintcode/" target="_blank" rel="external">PaintCode</a>：矢量图设计工具</li>
<li><a href="http://hao.jobbole.com/macaw/" target="_blank" rel="external">Macaw</a>：富有超前性和前瞻性的Web设计工具</li>
<li><a href="http://hao.jobbole.com/jimdo/" target="_blank" rel="external">Jimdo</a>：在线网页自助建站平台</li>
<li><a href="http://hao.jobbole.com/ceilfire/" target="_blank" rel="external">Ceilfire</a>：一个创建HTML5游戏并分享的平台</li>
<li><a href="http://hao.jobbole.com/weebly/" target="_blank" rel="external">Weebly</a>：快速搭建免费网站、博客和网店</li>
<li><a href="http://hao.jobbole.com/google-web-designer/" target="_blank" rel="external">Google Web Designer</a>：可视化HTML5网页和广告设计开发工具</li>
<li><a href="http://hao.jobbole.com/wix/" target="_blank" rel="external">Wix</a>：基于html5的免费网站生成应用</li>
<li><a href="http://hao.jobbole.com/vxplo/" target="_blank" rel="external">VXPLO</a>：专业的HTML5编辑工具</li>
<li><a href="http://hao.jobbole.com/%e6%98%93%e4%bc%81%e7%a7%80/" target="_blank" rel="external">易企秀</a>：H5页面移动微场景应用制作工具</li>
<li><a href="http://hao.jobbole.com/%e5%85%94%e5%b1%95/" target="_blank" rel="external">兔展</a>：微信场景应用的在线制作工具</li>
<li><a href="http://hao.jobbole.com/liveapp/" target="_blank" rel="external">Liveapp</a>：移动场景应用平台</li>
<li><a href="http://hao.jobbole.com/maka/" target="_blank" rel="external">MAKA</a>：简单、强大的H5创作工具</li>
<li><a href="http://hao.jobbole.com/%e5%88%9d%e9%a1%b5/" target="_blank" rel="external">初页</a>：微信H5海报创作工具</li>
<li><a href="http://hao.jobbole.com/%e7%99%bd%e6%9d%bf/" target="_blank" rel="external">白板</a>：设计图多人实时讨论工具</li>
<li><a href="http://hao.jobbole.com/ulead-cool-360/" target="_blank" rel="external">Ulead Cool 360</a>：一个全景图片生成器</li>
<li><a href="http://hao.jobbole.com/red-pen/" target="_blank" rel="external">Red pen</a>：设计图实时讨论工具</li>
<li><a href="http://hao.jobbole.com/coolsite360/" target="_blank" rel="external">Coolsite360</a>：无需编程的响应式网站设计工具</li>
<li><a href="http://hao.jobbole.com/epub360/" target="_blank" rel="external">Epub360</a>：专业级H5交互设计工具</li>
<li><a href="http://hao.jobbole.com/%e7%9a%ae%e5%bd%b1%e5%ae%a2/" target="_blank" rel="external">皮影客</a>：三分钟做部动画片</li>
<li><a href="http://hao.jobbole.com/webflow/" target="_blank" rel="external">Webflow</a>：傻瓜式网页设计制作平台</li>
<li><a href="http://hao.jobbole.com/quartz-composer/" target="_blank" rel="external">Quartz Composer</a>：图形化的编程工具</li>
<li><a href="http://hao.jobbole.com/after-effects/" target="_blank" rel="external">After Effects</a>：一款图形视频处理软件</li>
<li><a href="http://hao.jobbole.com/hype3/" target="_blank" rel="external">Hype 3</a>：帮助不会编程的用户轻松创建 HTML 5</li>
<li><a href="http://hao.jobbole.com/dorado/" target="_blank" rel="external">Dorado</a>：一款方便灵活的标注工具</li>
<li><a href="http://hao.jobbole.com/whatfontis/" target="_blank" rel="external">WhatFontIs</a>：在线图片字体识别工具</li>
<li><a href="http://hao.jobbole.com/%e5%9c%a8%e7%ba%bf%e8%ae%a4%e5%ad%97%e4%bd%93/" target="_blank" rel="external">在线认字体</a>：看图识字的求字体网</li>
<li><a href="http://hao.jobbole.com/markman/" target="_blank" rel="external">MarkMan马克鳗</a>：高效的设计稿标注、测量工具</li>
<li><a href="http://hao.jobbole.com/skala-preview/" target="_blank" rel="external">Skala Preview</a>：iOS UI 设计师必备</li>
<li><a href="http://hao.jobbole.com/briefs/" target="_blank" rel="external">Briefs</a>：专业APP设计工具</li>
<li><a href="http://hao.jobbole.com/placeit/" target="_blank" rel="external">Placeit</a>：在线预览APP界面设计效果图的模板工具</li>
<li><a href="http://hao.jobbole.com/ui-parde/" target="_blank" rel="external">UI Parde</a>：在线UI设计工具</li>
<li><a href="http://hao.jobbole.com/css-content-filter/" target="_blank" rel="external">CSS Content Filter</a>：易于定制、便于集成的CSS内容过滤工具</li>
<li><a href="http://hao.jobbole.com/tinycon/" target="_blank" rel="external">TinyCon</a>：用于管理Favicon和弹出框</li>
<li><a href="http://hao.jobbole.com/gitup/" target="_blank" rel="external">Gitup</a>：为Git所准备的图形化客户端</li>
<li><a href="http://hao.jobbole.com/unsplash-2/" target="_blank" rel="external">Unsplash</a>：用于网页中的图片占位符</li>
<li><a href="http://hao.jobbole.com/now-ui-kit/" target="_blank" rel="external">Now UI Kit</a>：用于网页设计、平板和手机的界面</li>
<li><a href="http://hao.jobbole.com/timber/" target="_blank" rel="external">Timber</a>：一款前端框架工具</li>
<li><a href="http://hao.jobbole.com/grid-guide/" target="_blank" rel="external">Grid.Guide</a>：计算栅格宽度的工具</li>
<li><a href="http://hao.jobbole.com/apostrophe/" target="_blank" rel="external">Apostrophe</a>：一款设计驱动下的内容管理系统</li>
<li><a href="http://hao.jobbole.com/bonsai/" target="_blank" rel="external">Bonsai</a>：一款为自由设计师所准备的工具</li>
<li><a href="http://hao.jobbole.com/gridlayout/" target="_blank" rel="external">GridLayout</a>：一款轻量级的栅格系统</li>
<li><a href="http://hao.jobbole.com/rucksack/" target="_blank" rel="external">Rucksack</a>：一款有趣的CSS工具</li>
<li><a href="http://hao.jobbole.com/flarum/" target="_blank" rel="external">Flarum</a>：一套简约易用的开源论坛系统</li>
<li><a href="http://hao.jobbole.com/lightning-design-systems/" target="_blank" rel="external">Lightning Design Systems</a>：专注于构建体验优秀的企业级APP</li>
<li><a href="http://hao.jobbole.com/frontify/" target="_blank" rel="external">Frontify</a>：维护品牌风格和样式的在线工具</li>
<li><a href="http://hao.jobbole.com/tinypng/" target="_blank" rel="external">TinyPng</a>：在线PNG图片压缩工具</li>
<li><a href="http://hao.jobbole.com/kendo-ui/" target="_blank" rel="external">Kendo UI</a> : jQuery HTML5 UI组件框架</li>
<li><a href="http://hao.jobbole.com/adobeedgewebfonts/" target="_blank" rel="external">AdobeEdgeWebFonts</a>：Adobe免费Web字体</li>
<li><a href="http://hao.jobbole.com/sizecalc/" target="_blank" rel="external">Sizecalc</a>：字体大小计算器</li>
<li><a href="http://hao.jobbole.com/inkpad/" target="_blank" rel="external">Inkpad</a>：iPad 矢量插图应用</li>
</ul>
<h3 id="设计教程"><a href="#设计教程" class="headerlink" title="设计教程"></a>设计教程</h3><ul>
<li><a href="http://hao.jobbole.com/sliderule/" target="_blank" rel="external">SlideRule</a>：在线免费课程搜索平台</li>
<li><a href="http://hao.jobbole.com/abduzeedo/" target="_blank" rel="external">Abduzeedo</a>：一家集创意灵感和教程的设计博客</li>
<li><a href="http://hao.jobbole.com/hackdesign/" target="_blank" rel="external">HackDesign</a>：黑客设计教学网</li>
<li><a href="http://hao.jobbole.com/lukew/" target="_blank" rel="external">Lukew</a>：干货文章分享，资深的用户体验专家</li>
<li><a href="http://hao.jobbole.com/ux-magazine/" target="_blank" rel="external">UX Magazine</a>：善于用通俗的案例讲解理论知识</li>
<li><a href="http://hao.jobbole.com/uxbooth/" target="_blank" rel="external">UXbooth</a>：专注于用户体验设计文章</li>
<li><a href="http://hao.jobbole.com/smashing-magazine/" target="_blank" rel="external">Smashing Magazine</a>：整体质量很高的设计文章</li>
<li><a href="http://hao.jobbole.com/the-great-discontent/" target="_blank" rel="external">The Great Discontent</a>：提供世界顶尖创意者的漫长访谈</li>
<li><a href="http://hao.jobbole.com/information-aesthetics/" target="_blank" rel="external">Information Aesthetics</a>：学习信息图设计和布局的网站</li>
<li><a href="http://hao.jobbole.com/about-tech/" target="_blank" rel="external">about tech</a>：数字排版开放课程</li>
<li><a href="http://hao.jobbole.com/aiga/" target="_blank" rel="external">AIGA</a>：专业的设计理论文章</li>
<li><a href="http://hao.jobbole.com/design-tutsplus/" target="_blank" rel="external">Design Tutsplus</a>：专业设计教程网</li>
</ul>
<h3 id="设计素材"><a href="#设计素材" class="headerlink" title="设计素材"></a>设计素材</h3><ul>
<li><a href="http://hao.jobbole.com/freepik/" target="_blank" rel="external">Freepik</a>：免费的素材搜索引擎</li>
<li><a href="http://hao.jobbole.com/rbno2-1/" target="_blank" rel="external">RBNo2.1</a>：是简化版的非衬线字体</li>
<li><a href="http://hao.jobbole.com/moki/" target="_blank" rel="external">Moki</a>：从七种不同的风格演变而来的字体</li>
<li><a href="http://hao.jobbole.com/king-wood-volume/" target="_blank" rel="external">King Wood Volume</a>：带有Tuscan的哥特式风格的字体</li>
<li><a href="http://hao.jobbole.com/window-dressing-jnl/" target="_blank" rel="external">Window Dressing JNL</a>：线条干净、简洁的字体</li>
<li><a href="http://hao.jobbole.com/zombie-sunrise/" target="_blank" rel="external">Zombie Sunrise</a>：一款手绘设计的字体</li>
<li><a href="http://hao.jobbole.com/toolkit/" target="_blank" rel="external">Toolkit</a>：一款免费的怀旧感字体</li>
<li><a href="http://hao.jobbole.com/poly/" target="_blank" rel="external">Poly</a>：一款基于几何排列的免费显示字体</li>
<li><a href="http://hao.jobbole.com/eaglefeather/" target="_blank" rel="external">Eaglefeather</a>：由P22 Type Foundry调整而来的字体</li>
<li><a href="http://hao.jobbole.com/hummingbird/" target="_blank" rel="external">Hummingbird</a>：一款既怀旧复古又有科技感的字体</li>
<li><a href="http://hao.jobbole.com/rosarian/" target="_blank" rel="external">Rosarian</a>：一款书法字体</li>
<li><a href="http://hao.jobbole.com/sketchrepo/" target="_blank" rel="external">Sketchrepo</a>：免费高品质的Sketch资源</li>
<li><a href="http://hao.jobbole.com/psdrepo/" target="_blank" rel="external">Psdrepo</a>：免费高品质的PSD资源</li>
<li><a href="http://hao.jobbole.com/the-pattern-library/" target="_blank" rel="external">The Pattern Library</a>：免费纹理素材资源网</li>
<li><a href="http://hao.jobbole.com/picjumbo/" target="_blank" rel="external">PicJumbo</a>：在线免费高质量素材网</li>
<li><a href="http://hao.jobbole.com/material-ui-colors/" target="_blank" rel="external">Material UI Colors</a>：为Material Design而生的配色模板</li>
<li><a href="http://hao.jobbole.com/design-kindle/" target="_blank" rel="external">Design Kindle</a>：免费网页UI设计素材下载站</li>
<li><a href="http://hao.jobbole.com/deviantart/" target="_blank" rel="external">DeviantArt</a>：最大的艺术和设计社区</li>
<li><a href="http://hao.jobbole.com/%e8%8a%b1%e7%93%a3%e7%bd%91/" target="_blank" rel="external">花瓣网</a>：设计师寻找灵感的天堂</li>
<li><a href="http://hao.jobbole.com/365psd/" target="_blank" rel="external">365PSD</a>：免费psd图片素材下载网站</li>
</ul>
<h3 id="配色方案"><a href="#配色方案" class="headerlink" title="配色方案"></a>配色方案</h3><ul>
<li><a href="http://hao.jobbole.com/spectrum/" target="_blank" rel="external">Spectrum</a>：色彩搭配、图片取色器工具</li>
<li><a href="http://hao.jobbole.com/coolors/" target="_blank" rel="external">Coolors</a>：自动生成配色色板的小工具</li>
<li><a href="http://hao.jobbole.com/material-palette/" target="_blank" rel="external">Material Palette</a>：Material Design专用在线配色工具</li>
<li><a href="http://hao.jobbole.com/material-ui-colors/" target="_blank" rel="external">Material UI Colors</a>：为Material Design而生的配色模板</li>
<li><a href="http://hao.jobbole.com/web%e5%ae%89%e5%85%a8%e8%89%b2/" target="_blank" rel="external">Web安全色</a>：WEB设计、开发中常用的安全颜色</li>
<li><a href="http://hao.jobbole.com/color-hunter/" target="_blank" rel="external">Color Hunter</a>：一个十分酷炫的配色网站</li>
<li><a href="http://hao.jobbole.com/%e9%85%8d%e8%89%b2%e7%bd%91/" target="_blank" rel="external">配色网</a>：国内的非盈利配色素材网站</li>
<li><a href="http://hao.jobbole.com/nippon-colors/" target="_blank" rel="external">Nippon colors</a>：日本传统用色色谱网站</li>
<li><a href="http://hao.jobbole.com/colorotate/" target="_blank" rel="external">Colorotate</a>：独特创意的设计调色板</li>
<li><a href="http://hao.jobbole.com/colorzilla/" target="_blank" rel="external">ColorZilla</a>：火狐浏览器网页取色器插件</li>
<li><a href="http://hao.jobbole.com/contrast-a/" target="_blank" rel="external">Contrast-A</a>：非常专业的调色板配置工具</li>
<li><a href="http://hao.jobbole.com/adobe-color-cc/" target="_blank" rel="external">Adobe Color CC</a>：Adobe取色器</li>
<li><a href="http://hao.jobbole.com/kuler/" target="_blank" rel="external">Kuler</a>：Adobe的配色工具</li>
<li><a href="http://hao.jobbole.com/color-scheme-designer%e7%bd%91%e7%ab%99/" target="_blank" rel="external">Color Palette Generator</a>：图片配色工具</li>
<li><a href="http://hao.jobbole.com/color-scheme-designer/" target="_blank" rel="external">Color Scheme Designer</a>：免费网络调色工具</li>
<li><a href="http://hao.jobbole.com/color-hunt/" target="_blank" rel="external">Color Hunt</a>：漂亮炫酷的配色方案</li>
<li><a href="http://hao.jobbole.com/brandseen/" target="_blank" rel="external">Brandseen</a>：匹配流行品牌LOGO颜色的在线游戏</li>
</ul>
<h3 id="高清图库"><a href="#高清图库" class="headerlink" title="高清图库"></a>高清图库</h3><ul>
<li><a href="http://hao.jobbole.com/photopin/" target="_blank" rel="external">PhotoPin</a>：基于Flickr图片资源搜索引擎</li>
<li><a href="http://hao.jobbole.com/splitshire/" target="_blank" rel="external">SplitShire</a>：免费高清摄影图片下载</li>
<li><a href="http://hao.jobbole.com/free-refe-mobile-photos/" target="_blank" rel="external">Free Refe Mobile Photos</a>：主要提供免费的手机图片</li>
<li><a href="http://hao.jobbole.com/photo-raster/" target="_blank" rel="external">Photo Raster</a>：在线免费图片编辑美化工具</li>
<li><a href="http://hao.jobbole.com/stock-up/" target="_blank" rel="external">Stock Up</a>：一次查找21个免费可商用图库网站</li>
<li><a href="http://hao.jobbole.com/wallpaperswide/" target="_blank" rel="external">Wallpaperswide</a>：精品壁纸下载站</li>
<li><a href="http://hao.jobbole.com/socwall/" target="_blank" rel="external">Socwall</a>：高清壁纸下载站</li>
<li><a href="http://hao.jobbole.com/flickr/" target="_blank" rel="external">flickr</a>：雅虎旗下图片分享网站</li>
<li><a href="http://hao.jobbole.com/500px/" target="_blank" rel="external">500px</a>：一个专业摄影师图片社区</li>
<li><a href="http://hao.jobbole.com/1x/" target="_blank" rel="external">1X</a>：一个优秀的摄影作品网站</li>
<li><a href="http://hao.jobbole.com/jaymantri/" target="_blank" rel="external">Jaymantri</a>：免费高清摄影图片网</li>
<li><a href="http://hao.jobbole.com/picography/" target="_blank" rel="external">Picography</a>：免费高清摄影图片分享网</li>
<li><a href="http://hao.jobbole.com/foodiesfeed/" target="_blank" rel="external">FoodiesFeed</a>：免费食品图片下载网站</li>
<li><a href="http://hao.jobbole.com/magdeleine/" target="_blank" rel="external">Magdeleine</a>：免费高清灵感图片网</li>
<li><a href="http://hao.jobbole.com/raumrot/" target="_blank" rel="external">Raumrot</a>：免费高分辨率无版权图片网</li>
<li><a href="http://hao.jobbole.com/freeimages/" target="_blank" rel="external">FreeImages</a>：免费商业图片素材网</li>
<li><a href="http://hao.jobbole.com/lifeofpix/" target="_blank" rel="external">LifeOfPix</a>：免费欧美生活图片网</li>
<li><a href="http://hao.jobbole.com/incogna/" target="_blank" rel="external">Incogna</a>：相似图片搜索引擎</li>
<li><a href="http://hao.jobbole.com/picitup/" target="_blank" rel="external">Picitup</a>：在线相似图片搜索引擎</li>
<li><a href="http://hao.jobbole.com/we-heart-it/" target="_blank" rel="external">We Heart It</a>：每天发现充满灵感且美丽的图片</li>
<li><a href="http://hao.jobbole.com/illusion/" target="_blank" rel="external">illusion</a>：展示最惊人的创意图片</li>
<li><a href="http://hao.jobbole.com/visualizeus/" target="_blank" rel="external">VisualizeUs</a>：一个图片收藏网站</li>
<li><a href="http://hao.jobbole.com/pincap/" target="_blank" rel="external">PinCap</a>：图片资源收集管理工具</li>
<li><a href="http://hao.jobbole.com/tineye/" target="_blank" rel="external">TinEye</a>：以图搜图的反向图片搜索引擎</li>
<li><a href="http://hao.jobbole.com/giphy/" target="_blank" rel="external">Giphy</a>：专搜GIF动态图的搜索引擎</li>
<li><a href="http://hao.jobbole.com/librestock/" target="_blank" rel="external">LibreStock</a>：一站搜寻二十个常用的图库网站</li>
<li><a href="http://hao.jobbole.com/im-free/" target="_blank" rel="external">IM Free</a>：免费高清图片库</li>
<li><a href="http://hao.jobbole.com/the-pattern-library/" target="_blank" rel="external">The Pattern Library</a>：免费纹理素材资源网</li>
<li><a href="http://hao.jobbole.com/picjumbo/" target="_blank" rel="external">PicJumbo</a>：在线免费高质量素材网</li>
<li><a href="http://hao.jobbole.com/design-kindle/" target="_blank" rel="external">Design Kindle</a>：免费网页UI设计素材下载站</li>
<li><a href="http://hao.jobbole.com/%e8%8a%b1%e7%93%a3%e7%bd%91/" target="_blank" rel="external">花瓣网</a>：设计师寻找灵感的天堂</li>
<li><a href="http://hao.jobbole.com/wallhaven/" target="_blank" rel="external">WallHaven</a>：高清壁纸图片搜索引擎</li>
<li><a href="http://hao.jobbole.com/snapographic/" target="_blank" rel="external">Snapographic</a>：免费高清照片订阅网</li>
<li><a href="http://hao.jobbole.com/twnsnd/" target="_blank" rel="external">Twnsnd</a>：免费复古照片公共档案库</li>
<li><a href="http://hao.jobbole.com/girly-drop/" target="_blank" rel="external">GIRLY DROP</a>：高清美女图片素材站</li>
<li><a href="http://hao.jobbole.com/foter/" target="_blank" rel="external">Foter</a>：免费图片素材搜索引擎</li>
<li><a href="http://hao.jobbole.com/designerspics/" target="_blank" rel="external">DesignersPics</a>：免费高清图片资源</li>
<li><a href="http://hao.jobbole.com/pexels/" target="_blank" rel="external">Pexels</a>：免费高品质图片 可商用</li>
<li><a href="http://hao.jobbole.com/gratisography/" target="_blank" rel="external">Gratisography</a>：定期发布高品质的免费照片</li>
<li><a href="http://hao.jobbole.com/function/" target="_blank" rel="external">Function</a>：优秀的图片网站</li>
<li><a href="http://hao.jobbole.com/pixabay/" target="_blank" rel="external">Pixabay</a>：内容丰富的摄影照片网站</li>
<li><a href="http://hao.jobbole.com/death-to-the-stock-photo/" target="_blank" rel="external">Death To The Stock Photo</a>：高品质的照片网站</li>
<li><a href="http://hao.jobbole.com/dotspin/" target="_blank" rel="external">DotSpin</a>：漂亮的图片素材网站</li>
<li><a href="http://hao.jobbole.com/new-old-stock/" target="_blank" rel="external">New Old Stock</a>：一个有趣的复古照片网站</li>
<li><a href="http://hao.jobbole.com/superfamous-studios/" target="_blank" rel="external">Superfamous</a>：免费高质量图片素材</li>
<li><a href="http://hao.jobbole.com/little-visuals/" target="_blank" rel="external">Little Visuals</a>：免费高质量图片素材</li>
<li><a href="http://hao.jobbole.com/unsplash/" target="_blank" rel="external">Unsplash</a>： 高品质免费图片素材库</li>
</ul>
<p></p><h3 id="weibo-weixin">微博、微信公众号</h3><p></p>
<ul>
<li>设计的那些事 微博：<a href="http://weibo.com/u/2088601913" target="_blank" rel="external">@设计的那些事</a></li>
<li>设计的那些事：分享精选的设计相关文章、案例和行业动态。同时，也会不定期推荐设计教程、高薪职位和设计相关的优秀工具。<br><br><img src="http://ww1.sinaimg.cn/mw690/bfdcef89gw1evuvyavvvmj207607674r.jpg" width="150" height="150"></li>
<li>UI设计达人：分享 UI 设计精选文章、案例、行业趋势、课程和书籍。<br><img src="http://ww4.sinaimg.cn/mw690/bfdcef89gw1evuvyehtx4j2076076q3e.jpg" width="150" height="150"></li>
<li>网页设计精选：分享网页设计精选文章、案例、行业趋势、课程和书籍。<br><img src="http://ww2.sinaimg.cn/mw690/bfdcef89gw1evuvyhsikmj2076076dgb.jpg" width="150" height="150"></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些有用的设计资源&lt;br&gt;
    
    </summary>
    
    
      <category term="Design" scheme="https://thuxuxs.github.io/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>二能级系统以及常用计算方法</title>
    <link href="https://thuxuxs.github.io/2017/02/03/%E4%BA%8C%E8%83%BD%E7%BA%A7%E7%B3%BB%E7%BB%9F%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/"/>
    <id>https://thuxuxs.github.io/2017/02/03/二能级系统以及常用计算方法/</id>
    <published>2017-02-03T22:41:33.000Z</published>
    <updated>2017-04-27T17:58:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>二能级系统是许多物理研究的基础，特别是量子光学。本文简单介绍半经典理论下（原子量子化、光场没有量子化）二能级系统的一些常用计算方法以及缀饰态的概念。<br><a id="more"></a></p>
<h2 id="原始表象"><a href="#原始表象" class="headerlink" title="原始表象"></a>原始表象</h2><p>我们设$\left|1\right&gt;$为基态，$\left|2\right&gt;$为激发态，能级差为$E=\hbar \omega_0$，选择能级中心为零势能点，则两个能级的能量本征值分别为$$E_1=-\hbar \omega_0/2,E_2=\hbar\omega_0/2.$$ 入射光频率为$\omega$，那么系统随时间演化的态和哈密顿量可写为<br>$$\begin{aligned}<br>\left|\psi(t)\right&gt;&amp;=a_1(t)\left|1\right&gt;+a_2(t)\left|2\right&gt;\\<br>&amp;=\mathbf{a}^T\mathbf{n}\\<br>H&amp;=-\frac{\hbar}{2}\omega_0\sigma_{11}+\frac{\hbar}{2}\omega_0\sigma_{22}+\frac{\hbar}{2}(\Omega^\dagger(t) e^{i\omega t}+\Omega(t) e^{-i\omega t})(\sigma_{12}+\sigma_{21})\\<br>&amp;=-\frac{\hbar}{2}\omega_0\sigma_z+\frac{\hbar}{2}(\Omega^\dagger(t) e^{i\omega t}+\Omega(t) e^{-i\omega t})\sigma_x\\<br>&amp;=H_0+V(t)<br>\end{aligned}$$<br>写出薛定谔方程可得概率幅随时间的演化公式<br>$$i\hbar\frac{d \mathbf{a}}{dt}=\mathbf{Ha}$$<br>其中$\mathbf{H},\mathbf{a}$分别为其矩阵形式。</p>
<h2 id="相互作用表象"><a href="#相互作用表象" class="headerlink" title="相互作用表象"></a>相互作用表象</h2><p>我们取<br>$$\begin{aligned}<br>\left|\psi(t)\right&gt;&amp;=b_1(t)e^{-iE_1t/\hbar}\left|1\right&gt;+b_2(t)e^{-iE_2t/\hbar}\left|2\right&gt;\\<br>&amp;=b_1(t)e^{i\omega_0t/2}\left|1\right&gt;+b_2(t)e^{-i\omega_0t/2}\left|2\right&gt;<br>\end{aligned}$$<br>那么我们可以求出此表象与原始表象之间的关系<br>$$\mathbf{a}=e^{-i\mathbf{H_0}t/\hbar}\mathbf{b}=e^{i\omega_0t\sigma_z}\mathbf{b}=U_1^\dagger\mathbf{b}$$<br>$$\mathbf{b}=U_1\mathbf{a},\quad \mathbf{n}_I^T(t)=\mathbf{n}^TU_1^\dagger$$<br>则我们可以计算出新的表象下薛定谔方程和哈密顿量的形式为<br>$$\begin{aligned}<br>i\hbar\frac{d\mathbf{b}}{dt}&amp;=i\hbar\left(\frac{dU_1}{dt}\mathbf{a}+U_1\frac{d\mathbf{a}}{dt}\right)\\<br>&amp;=i\hbar\frac{dU_1}{dt}U_1^\dagger\mathbf{b}+U_1\mathbf{H}U_1^\dagger\mathbf{b}\\<br>&amp;=\left(U_1\mathbf{H}U_1^\dagger+i\hbar\frac{dU_1}{dt}U_1^\dagger\right)\mathbf{b}\\<br>&amp;=\mathbf{H}_1\mathbf{b}<br>\end{aligned}$$<br>可计算出新的哈密顿量为<br>$$\begin{aligned}<br>\mathbf{H}_1&amp;=U_1\mathbf{H}U_1^\dagger+i\hbar\frac{dU_1}{dt}U_1^\dagger\\<br>&amp;=U_1\mathbf{V}U_1^\dagger\\<br>&amp;=\frac{\hbar}{2}\begin{pmatrix}0&amp;\Omega^\dagger(t)e^{-i\delta t}+\Omega(t)e^{-i(\omega+\omega_0)t}\\\Omega(t)e^{i\delta t}+\Omega^\dagger(t)e^{i(\omega+\omega_0)t}&amp;0\end{pmatrix}\\<br>&amp;\approx\frac{\hbar}{2}\begin{pmatrix}0&amp;\Omega^\dagger(t)e^{-i\delta t}\\\Omega(t)e^{i\delta t}&amp;0\end{pmatrix}<br>\end{aligned}$$<br>最后一式在旋波近似下成立。<code>由此可见在相互作用表象下，最后的哈密顿量只剩下含时的（也可不含时）相互作用项。</code></p>
<h2 id="场相互作用表象"><a href="#场相互作用表象" class="headerlink" title="场相互作用表象"></a>场相互作用表象</h2><p>我们取<br>$$<br>\left|\psi(t)\right&gt;=c_1(t)e^{i\omega t/2}\left|1\right&gt;+c_2(t)e^{-i\omega t/2}\left|2\right&gt;<br>$$<br>那么我们可以求出此表象与原始表象之间的关系<br>$$\mathbf{a}=e^{i\omega t\sigma_z}\mathbf{c}=U_2^\dagger\mathbf{c}$$<br>$$\mathbf{c}=U_2\mathbf{a},\quad \mathbf{n}_F^T(t)=\mathbf{n}^TU_2^\dagger$$<br>则我们可以计算出新的表象下薛定谔方程和哈密顿量的形式为<br>$$\begin{aligned}<br>i\hbar\frac{d\mathbf{c}}{dt}<br>&amp;=\left(U_2\mathbf{H}U_2^\dagger+i\hbar\frac{dU_2}{dt}U_2^\dagger\right)\mathbf{c}\\<br>&amp;=\mathbf{H}_2\mathbf{c}<br>\end{aligned}$$<br>可计算出新的哈密顿量为<br>$$\begin{aligned}<br>\mathbf{H}_2&amp;=U_2\mathbf{H}U_2^\dagger+i\hbar\frac{dU_2}{dt}U_2^\dagger\\<br>&amp;=\frac{\hbar}{2}\begin{pmatrix}-\delta&amp;\Omega^\dagger(t)+\Omega(t)e^{-2i\omega t}\\\Omega(t)+\Omega^\dagger(t)e^{2i\omega t}&amp;\delta\end{pmatrix}\\<br>&amp;\approx\frac{\hbar}{2}\begin{pmatrix}-\delta&amp;\Omega^\dagger(t)\\\Omega(t)&amp;\delta\end{pmatrix}<br>\end{aligned}$$<br>最后一式在旋波近似下成立。此表象的好处是比较容易计算态的概率幅。当拉比频率不含时时，我们可以直接对薛定谔方程积分<br>$$\begin{aligned}<br>\mathbf{c}(t)&amp;=e^{-i\mathbf{H}_2t/\hbar}\mathbf{c}(0)\\<br>&amp;=e^{-i\mathbf{n}\cdot\mathbf{\sigma}\Omega t/2}\mathbf{c}(0)<br>\end{aligned}$$</p>
<h2 id="缀饰表象"><a href="#缀饰表象" class="headerlink" title="缀饰表象"></a>缀饰表象</h2><p>在场相互作用表象下，我们再将基矢做一个旋转变换<br>$$\mathbf{n}_D(t)=T\mathbf{n}_F(t)$$<br>$T$为一般旋转矩阵<br>$$T(t)=\begin{pmatrix}<br>\cos(\theta(t))&amp;-\sin(\theta(t))\\<br>\sin(\theta(t))&amp;\cos(\theta(t))<br>\end{pmatrix}$$<br>那么此时的酉变换为$U_3=T$，且新的哈密顿量为<br>$$\begin{aligned}<br>\mathbf{H}_D&amp;=T\mathbf{H_2}T^\dagger+i\hbar\frac{dT}{dt}T^\dagger\\<br>\end{aligned}$$</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二能级系统是许多物理研究的基础，特别是量子光学。本文简单介绍半经典理论下（原子量子化、光场没有量子化）二能级系统的一些常用计算方法以及缀饰态的概念。&lt;br&gt;
    
    </summary>
    
    
      <category term="Physics" scheme="https://thuxuxs.github.io/tags/Physics/"/>
    
  </entry>
  
  <entry>
    <title>费米黄金法则</title>
    <link href="https://thuxuxs.github.io/2017/01/31/%E8%B4%B9%E7%B1%B3%E9%BB%84%E9%87%91%E6%B3%95%E5%88%99/"/>
    <id>https://thuxuxs.github.io/2017/01/31/费米黄金法则/</id>
    <published>2017-01-31T22:09:32.000Z</published>
    <updated>2017-02-01T00:53:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>从微扰论出发，得到费米黄金法则，一句话总结：<strong>外电磁场作用下的原子态间跃迁几率与跃迁矩阵元的模量平方、末态态密度成正比</strong><br><a id="more"></a></p>
<h1 id="含时微扰论"><a href="#含时微扰论" class="headerlink" title="含时微扰论"></a>含时微扰论</h1><p>系统哈密顿量为<br>$$H=H_0+W(t)$$<br>其中$W(t)$微扰，在没有微扰时，系统的本征态为$H_0\left|n\right&gt;=E_n\left|n\right&gt;$，我们设有微扰时的状态为<br>$$\begin{aligned}<br>H\left|\psi(t)\right&gt;&amp;=i\hbar\frac{\partial}{\partial t}\sum_n{c_n(t)\left|n\right&gt;e^{-iE_nt/\hbar}}\\<br>&amp;=i\hbar\sum_n{\frac{\partial c_n(t)}{\partial t}\left|n\right&gt;e^{-iE_n t/\hbar}}+\sum_n{c_n(t)E_n\left|n\right&gt;e^{-iE_n t/\hbar}}\\<br>&amp;=\sum_n{c_n(t)W(t)\left|n\right&gt;e^{-iE_n t/\hbar}}+\sum_n{c_n(t)E_n\left|n\right&gt;e^{-iE_n t/\hbar}}<br>\end{aligned}$$<br>所以得到<br>$$\sum_n{c_n(t)W_{kn}e^{-iE_n t/\hbar}}=i\hbar \frac{\partial c_k(t)}{\partial t}e^{-iE_k t/\hbar}$$<br>$$<br>\frac{\partial c_k(t)}{\partial t}=\frac{1}{i\hbar}\sum_n{c_n(t)W_{kn}e^{iE_{kn}t/\hbar}}<br>$$<br>初始时系统处于状态$\left|i\right&gt;$，将$c_k(t)$进行微扰展开<br>$$c_k(t)=c_k^0(t)+c_k^1(t)+…$$<br>考虑到微扰是一阶微扰，所以我们有</p>
<h2 id="零阶微扰"><a href="#零阶微扰" class="headerlink" title="零阶微扰"></a>零阶微扰</h2><p>$$\frac{\partial c_k^0(t)}{\partial t}=0$$<br>所以<br>$$c_k^0(t)=\delta_{ik}$$</p>
<h2 id="一阶微扰"><a href="#一阶微扰" class="headerlink" title="一阶微扰"></a>一阶微扰</h2><p>$$\begin{aligned}<br>\frac{\partial c_k^1(t)}{\partial t}&amp;=\frac{1}{i\hbar}\sum_n{c_n^0(t)W_{kn}e^{iE_{kn}t/\hbar}}\\<br>&amp;=\frac{1}{i\hbar}W_{ki}e^{i\omega_{ki}t}<br>\end{aligned}$$</p>
<p>所以在一阶微扰近似下，我们得到$(f\neq i)$<br>$$\begin{aligned}<br>|\left<f|\psi(t)\right>|^2<br>&amp;=|c_f(t)|^2\\<br>&amp;=\left|\frac{1}{i\hbar}\int_0^t{W_{fi}e^{i\omega_{fi}t’}dt’}\right|^2<br>\end{aligned}$$</f|\psi(t)\right></p>
<h1 id="费米黄金法则"><a href="#费米黄金法则" class="headerlink" title="费米黄金法则"></a>费米黄金法则</h1><p>我们考虑最常见的<code>简谐微扰</code>，一般的微扰也可以通过傅里叶变换转化为简谐微扰。<br>$$W(t)=2W\cos(\omega t)=W(e^{i\omega t}+e^{-i\omega t})$$<br>所以求得末态的概率幅为<br>$$\begin{aligned}<br>c_f(t)&amp;=\frac{1}{i\hbar}\int_0^t{W_{fi}(e^{i\omega t’}+e^{-i\omega t’})e^{i\omega_{fi}t’}dt’}\\<br>&amp;=\frac{W_{fi}}{i\hbar}\left(\frac{e^{i(\omega_{fi}+\omega)t}-1}{i(\omega_{fi}+\omega)}+\frac{e^{i(\omega_{fi}-\omega)t}-1}{i(\omega_{fi}-\omega)}\right)<br>\end{aligned}$$<br>假设微扰的频率是近共振的，即$\omega \approx \omega_{fi}$，所以上式括号内第一项可以忽略，因为其分母比分子大很多，而第二项则不是。在此条件下有<br>$$\begin{aligned}<br>|\left<f|\psi(t)\right>|^2<br>&amp;=\frac{W_{fi}^2}{\hbar^2}\left|\frac{e^{i(\omega_{fi}-\omega)t}-1}{i(\omega_{fi}-\omega)}\right|^2\\<br>&amp;=\frac{W_{fi}^2}{\hbar^2}\left|\frac{e^{i(\omega_{fi}-\omega)t/2}-e^{-i(\omega_{fi}-\omega)t/2}}{i(\omega_{fi}-\omega)}\right|^2\\<br>&amp;=\frac{W_{fi}^2}{\hbar^2}\left|\frac{\sin{(\omega_{fi}-\omega)t/2}}{(\omega_{fi}-\omega)/2}\right|^2\\<br>\end{aligned}$$<br>由于取了一阶微扰近似和旋波近似，所以此理论是有一定作用规范为的，必须满足$$\frac{1}{\omega}\approx\frac{1}{\omega_{fi}}\ll t \ll \frac{1}{|W_{fi}|/\hbar}$$所考虑的时间要比微扰的周期大得多但又要比能力差对应的时间尺度小很多。</f|\psi(t)\right></p>
<h2 id="末态为连续态"><a href="#末态为连续态" class="headerlink" title="末态为连续态"></a>末态为连续态</h2><p>当末态是连续态时，跃迁概率应该为上述概率诚意态密度后的积分。<br>$$\begin{aligned}<br>p(t)<br>&amp;=\int |\left<f|\psi(t)\right>|^2 \rho(E)dE\\<br>&amp;=\int{\frac{W_{fi}^2}{\hbar^2}\left|\frac{\sin{(\omega_{fi}-\omega)t/2}}{(\omega_{fi}-\omega)/2}\right|^2\rho(E)dE}\\<br>&amp;\approx\frac{W_{fi}^2\rho(E_{fi})}{\hbar^2}\int{\left|\frac{\sin{(\omega_{fi}-\omega)t/2}}{(\omega_{fi}-\omega)/2}\right|^2\hbar d\omega}\\<br>&amp;\approx\frac{W_{fi}^2\rho(E_{fi})}{\hbar^2}\hbar(\frac{2}{t})t^2\int_{-\infty}^{+\infty}{\frac{\sin^2x}{x^2}dx}\\<br>&amp;=\frac{2\pi}{\hbar}W_{fi}^2\rho(E_{fi})t<br>\end{aligned}$$<br>第一个约等于是因为假设绝对值内是Delta函数（画图可知类似于），第二个约等于是因为积分号内的函数在频率很大时几乎为零，所以可以将积分限取为正负无穷。<br>传输率为$$\Gamma=\frac{\partial p}{\partial t}=\frac{2\pi}{\hbar}W_{fi}^2\rho(E_{fi})$$</f|\psi(t)\right></p>
<blockquote>
<p>此理论做了无数的近似，我不知道最后结果跟实际结果差别到底有多大。。。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从微扰论出发，得到费米黄金法则，一句话总结：&lt;strong&gt;外电磁场作用下的原子态间跃迁几率与跃迁矩阵元的模量平方、末态态密度成正比&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Physics" scheme="https://thuxuxs.github.io/tags/Physics/"/>
    
  </entry>
  
  <entry>
    <title>光力系统哈密顿量的线性化</title>
    <link href="https://thuxuxs.github.io/2017/01/09/%E5%85%89%E5%8A%9B%E7%B3%BB%E7%BB%9F%E5%93%88%E5%AF%86%E9%A1%BF%E9%87%8F%E7%9A%84%E7%BA%BF%E6%80%A7%E5%8C%96/"/>
    <id>https://thuxuxs.github.io/2017/01/09/光力系统哈密顿量的线性化/</id>
    <published>2017-01-09T22:28:51.000Z</published>
    <updated>2017-01-18T23:13:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>光力系统中哈密顿量的线性化<br><a id="more"></a><br>由于辐射压力的存在，光学微腔的共振频率受到微小的改变，我们把这种改变线性展开到第二项，忽略高阶项得其系统哈密顿量为<br>$$<br>H=\hbar\omega_m b^\dagger b+\hbar(\omega_0-Gx)a^\dagger a+i\hbar\sqrt{k_{ex}}(a^\dagger s_{in} e^{-i\omega_lt}-a s_{in}^\dagger e^{i\omega_lt})<br>$$<br>首先取酉变换$U=\exp{(i\omega_l a^\dagger at)}$，并由$x=x_{ZPF}(b^\dagger +b)$，得哈密顿量变为<br>$$H=-\hbar\Delta a^\dagger a-\hbar g_0a^\dagger a(b^\dagger + b)+\hbar \omega_m b^\dagger b+i\hbar \sqrt{\kappa_{ex}}(a^\dagger s_{in}-as_{in}^\dagger)$$<br>这里设$\Delta=\omega_l-\omega_0,g_0=Gx_{ZPF}$。<br>下面做线性化处理，我们取$a=\overline{\alpha}+\delta a$，此时相互作用的哈密顿量为<br>$$H_{int}=-\hbar g_0(\overline{\alpha}+\delta a)^\dagger(\overline{\alpha}+\delta a)(b^\dagger+b)=-\hbar g_0\sqrt{n_{cav}}(\delta a+\delta a^\dagger)(b^\dagger + b)$$<br>所以总的哈密顿量为<br>$$H=-\hbar \Delta \delta a^\dagger \delta a-\hbar g(\delta a+\delta a^\dagger)(b^\dagger + b)+\hbar \omega_m b^\dagger b$$<br>这里$g=g_0\sqrt{n_{cav}}=g_0\overline{\alpha}$。特别注意此时的泵浦项会抵消掉！对于相互作用哈密顿量，在不同的失谐量下可以选取不同部分，当在红失谐是，我们舍去$\delta a b+\delta a^\dagger b^\dagger$，此时哈密顿量为<br>$$H=-\hbar \Delta \delta a^\dagger \delta a-\hbar g(\delta ab^\dagger + \delta a^\dagger b)+\hbar \omega_m b^\dagger b$$<br>而当蓝失谐时，有哈密顿量为<br>$$H=-\hbar \Delta \delta a^\dagger \delta a-\hbar g(\delta ab + \delta a^\dagger b^\dagger)+\hbar \omega_m b^\dagger b$$</p>
<blockquote>
<p>临时推导</p>
</blockquote>
<p>$$H=\hbar \omega_m b^\dagger b+\hbar \omega_{1}a_1^\dagger a_1+\hbar \omega_{2}a_2^\dagger a_2+\hbar G_1(a_1^\dagger b+a_1b^\dagger)+\hbar G_2(a_2^\dagger b+a_2 b^\dagger)+i\hbar\sqrt{\kappa_{ex1}}A_1(a_1^\dagger e^{-i\omega_{l1}t}-a_1 e^{i\omega_{l1}t})+i\hbar\sqrt{\kappa_{ex1}}A_{in}(a_1^\dagger e^{-i\omega_{in}t}-a_1 e^{i\omega_{in}t})+i\hbar\sqrt{\kappa_{ex2}}A_2(a_2^\dagger e^{-i\omega_{l2}t}-a_1 e^{i\omega_{l2}t})$$<br>$U=e^{i\theta t(a_1^\dagger a_1+a_2^\dagger a_2+b^\dagger b)}$</p>
<p>$$\begin{aligned}<br>H=&amp;\hbar (\omega_m-\theta) b^\dagger b+\hbar (\omega_{1}-\theta)a_1^\dagger a_1+\hbar (\omega_{2}-\theta)a_2^\dagger a_2+\hbar G_1(a_1^\dagger b+a_1b^\dagger)+\hbar G_2(a_2^\dagger b+a_2 b^\dagger)\\<br>&amp;+i\hbar\sqrt{\kappa_{ex1}}A_1(a_1^\dagger e^{i\theta t}e^{-i\omega_{l1}t}-a_1 e^{-i\theta t}e^{i\omega_{l1}t})\\<br>&amp;+i\hbar\sqrt{\kappa_{ex1}}A_{in}(a_1^\dagger e^{i\theta t}e^{-i\omega_{in}t}-a_1 e^{-i\theta t}e^{i\omega_{in}t})\\<br>&amp;+i\hbar\sqrt{\kappa_{ex2}}A_2(a_2^\dagger e^{i\theta t}e^{-i\omega_{l2}t}-a_1 e^{-i\theta t}e^{i\omega_{l2}t})\\<br>=&amp;\hbar (\omega_m-\theta) \beta^\dagger \beta+\hbar (\omega_{1}-\theta)\alpha_1^\dagger \alpha_1+\hbar (\omega_{2}-\theta)\alpha_2^\dagger \alpha_2+\hbar G_1(\alpha_1^\dagger \beta+\alpha_1\beta^\dagger)+\hbar G_2(\alpha_2^\dagger \beta+\alpha_2 \beta^\dagger)\\<br>&amp;+i\hbar\sqrt{\kappa_{ex1}}A_1(\alpha_1^\dagger e^{-i\omega_{l1}t}-\alpha_1 e^{i\omega_{l1}t})\\<br>&amp;+i\hbar\sqrt{\kappa_{ex1}}A_{in}(\alpha_1^\dagger e^{-i\omega_{in}t}-\alpha_1 e^{i\omega_{in}t})\\<br>&amp;+i\hbar\sqrt{\kappa_{ex2}}A_2(\alpha_2^\dagger e^{-i\omega_{l2}t}-\alpha_1 e^{i\omega_{l2}t})\\<br>\end{aligned}$$</p>
<p>$U=e^{i\omega_{l1}ta_1^\dagger a_1+i\omega_{l2}a_2^\dagger a_2}$<br>$$\begin{aligned}<br>H=&amp;\hbar (\omega_m-\theta) \beta^\dagger \beta+\hbar (\omega_{1}-\theta-\omega_{l1})\alpha_1^\dagger \alpha_1+\hbar (\omega_{2}-\theta-\omega_{l2})\alpha_2^\dagger \alpha_2+\hbar G_1(\alpha_1^\dagger \beta e^{i\omega_{l1}t}+\alpha_1\beta^\dagger e^{-i\omega_{l1}t})+\hbar G_2(\alpha_2^\dagger \beta e^{i\omega_{l2}t}+\alpha_2 \beta^\dagger e^{-i\omega_{l2}t})\\<br>&amp;+i\hbar\sqrt{\kappa_{ex1}}A_1(\alpha_1^\dagger e^{-i\omega_{l1}t}-\alpha_1 e^{i\omega_{l1}t})\\<br>&amp;+i\hbar\sqrt{\kappa_{ex1}}A_{in}(\alpha_1^\dagger e^{-i\omega_{in}t}-\alpha_1 e^{i\omega_{in}t})\\<br>&amp;+i\hbar\sqrt{\kappa_{ex2}}A_2(\alpha_2^\dagger e^{-i\omega_{l2}t}-\alpha_1 e^{i\omega_{l2}t})\\<br>\end{aligned}$$</p>
<p>$$\begin{aligned}<br>\dot{\alpha}&amp;=-\frac{\kappa}{2}\alpha+i(\Delta+Gx)\alpha+\sqrt{\kappa_{ex}}\alpha_{in}\\<br>\dot{x}&amp;=v\\<br>\dot{v}&amp;=-\Omega_m^2x-\Gamma_m v+\hbar G|\alpha|^2/m_{eff}<br>\end{aligned}$$</p>
<p>$$<br>\begin{aligned}<br>\frac{d \sqrt{\kappa_{ex}}\alpha/\alpha_{in}}{d \kappa_{ex}t}<br>&amp;=-\frac{\kappa/\kappa_{ex}}{2}\frac{\sqrt{\kappa_{ex}}\alpha}{\alpha_{in}}+i(\frac{\Delta}{\kappa_{ex}}+\frac{Gx}{\kappa_{ex}})\frac{\sqrt{\kappa_{ex}}\alpha}{\alpha_{in}}+1\\<br>\frac{d Gx/\kappa_{ex}}{d\kappa_{ex}t}&amp;=\frac{Gv}{\kappa_{ex}^2}\\<br>\frac{dGv/\kappa_{ex}^2}{d\kappa_{ex}t}&amp;=-\frac{\Omega_m^2}{\kappa_{ex}^2} \frac{Gx}{\kappa_{ex}}-\frac{\Gamma_m}{\kappa_{ex}} \frac{Gv}{\kappa_{ex}^2}+\frac{\hbar G^2\alpha_{in}^2}{m_{eff}\kappa_{ex}^4}|\sqrt{\kappa_{ex}}\alpha/\alpha_{in}|^2\\<br>\end{aligned}<br>$$</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;光力系统中哈密顿量的线性化&lt;br&gt;
    
    </summary>
    
    
      <category term="Physics" scheme="https://thuxuxs.github.io/tags/Physics/"/>
    
  </entry>
  
  <entry>
    <title>python 超快速计算</title>
    <link href="https://thuxuxs.github.io/2017/01/02/python-%E8%B6%85%E5%BF%AB%E9%80%9F%E8%AE%A1%E7%AE%97/"/>
    <id>https://thuxuxs.github.io/2017/01/02/python-超快速计算/</id>
    <published>2017-01-02T22:54:05.000Z</published>
    <updated>2017-01-02T23:26:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍Python中的超快速计算<br><a id="more"></a><br>Python最为一门比较高级的语言其运行速度自然在大多数时候比不上C这种语言，但其可读性和便捷性还是使这门语言在全球非常的流行。另外，python众多的库使其在各个领域都非常的火热，特别是在数据处理方面。一般情况我们用python进行数据处理时，经常用到的库包括Numpy、Scipy等，实际上这些库已经大大弥补了python运行速度上的短板，但在这里，我们还将介绍一下用python进行的更快的计算库，这个库就是<code>numexpr</code>，其使用也相当简单，直接使用<code>numexpr.evaluate()</code>函数来运行一个表达式即可，举个超级简单的例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> numexpr <span class="keyword">as</span> ne</div><div class="line">a=np.arange(<span class="number">2000</span>)</div><div class="line">r=ne.evaluate(<span class="string">'cos(a)'</span>)</div></pre></td></tr></table></figure></p>
<p>通过下面的代码我们可以明显看到用四种不同方法来完成同一个任务的时间差异<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> timeit <span class="keyword">import</span> timeit</div><div class="line"><span class="keyword">import</span> numexpr <span class="keyword">as</span> ne</div><div class="line">a=np.arange(<span class="number">1</span>,<span class="number">25000000</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> a</div><div class="line">    r=[np.log(x)*<span class="number">3</span>+np.cos(x)**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> a]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> a</div><div class="line">    r=np.log(a)*<span class="number">3</span>+np.cos(a)**<span class="number">2</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test3</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> a</div><div class="line">    ne.set_num_threads(<span class="number">1</span>)</div><div class="line">    f=<span class="string">'3*log(a)+cos(a)**2'</span></div><div class="line">    r=ne.evaluate(f)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test4</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> a</div><div class="line">    ne.set_num_threads(<span class="number">4</span>)</div><div class="line">    f=<span class="string">'3*log(a)+cos(a)**2'</span></div><div class="line">    r=ne.evaluate(f)</div><div class="line"></div><div class="line"><span class="keyword">print</span> timeit(<span class="string">'test1()'</span>,setup=<span class="string">'from __main__ import test1'</span>,number=<span class="number">1</span>)</div><div class="line"><span class="keyword">print</span> timeit(<span class="string">'test2()'</span>,setup=<span class="string">'from __main__ import test2'</span>,number=<span class="number">1</span>)</div><div class="line"><span class="keyword">print</span> timeit(<span class="string">'test3()'</span>,setup=<span class="string">'from __main__ import test3'</span>,number=<span class="number">1</span>)</div><div class="line"><span class="keyword">print</span> timeit(<span class="string">'test4()'</span>,setup=<span class="string">'from __main__ import test4'</span>,number=<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment">###output</span></div><div class="line"><span class="comment"># 84.5878441334</span></div><div class="line"><span class="comment"># 2.08765912056</span></div><div class="line"><span class="comment"># 0.461308956146</span></div><div class="line"><span class="comment"># 0.300596952438</span></div></pre></td></tr></table></figure></p>
<p>其中<code>set_num_threads</code>函数设置计算的线程数。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍Python中的超快速计算&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://thuxuxs.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Adiabatic passage in EIT</title>
    <link href="https://thuxuxs.github.io/2016/12/20/Adiabatic-passage-in-EIT/"/>
    <id>https://thuxuxs.github.io/2016/12/20/Adiabatic-passage-in-EIT/</id>
    <published>2016-12-21T03:24:24.000Z</published>
    <updated>2016-12-22T22:07:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>EIT中的绝热过程<br><a id="more"></a></p>
<h2 id="No-damping"><a href="#No-damping" class="headerlink" title="No damping"></a>No damping</h2><p>三能级系统哈密顿量为<br>$$<br>\begin{aligned}<br>H&amp;=H_0+H_1\\<br>&amp;=H_0-ex\cdot E\\<br>&amp;=H_0-ex\cdot (E_p\cos\phi_p+E_c\cos\phi_c)\\<br>&amp;=\hbar\omega_{ab}\sigma_{aa}+\hbar\omega_{cb}\sigma_{cc}\\<br>&amp;+\frac{\hbar}{2}(\Omega_p e^{-i\omega_p t}\sigma_{ab}+\Omega_c e^{-\omega_c t}\sigma_{ac}+H.c.)\\<br>\end{aligned}$$<br>此处已选择基态能级为零势能点。选取变换$U=\exp[i\omega_pt\sigma_{aa}+i(\omega_p-\omega_c)t\sigma_{cc}]$，则有新的哈密顿量为</p>
<blockquote>
<p>这里用到公式$H’=U H U^\dagger -i\hbar U\partial U^\dagger /\partial t$</p>
</blockquote>
<p>$$<br>\begin{aligned}<br>H&amp;=-\hbar\Delta_p\sigma_{aa}-\hbar\Delta\sigma_{cc}\\<br>&amp;+\frac{\hbar}{2}(\Omega_p\sigma_{ab}+\Omega_c\sigma_{ac}+H.c.)<br>\end{aligned}<br>$$<br>其中$\Delta_p=\omega_p-\omega_{ab}$,$\Delta=\omega_p-\omega_c-\omega_{cb}=\Delta_p-(\omega_c-\omega_{ac})=\Delta_p-\Delta_c$<br>我们取双光子共振条件$\Delta=\Delta_p-\Delta_c=0$，则哈密顿量可写成矩阵形式为<br>$$<br>H=-\frac{\hbar}{2}<br>\begin{bmatrix}<br>2\Delta_p&amp;-\Omega_p&amp;-\Omega_c\\<br>-\Omega_p^\dagger&amp;0&amp;0\\<br>-\Omega_c^\dagger&amp;0&amp;0<br>\end{bmatrix}$$<br>系统本征值为$$\lambda_1=0,\lambda_{2,3}=-\frac{\hbar}{2}(\Delta_p\pm\sqrt{\Delta_p^2+|\Omega_c|^2+|\Omega_p|^2})$$<br>其中本征值为零的态称为暗态，其对应的本征态为<br>$$\left|Dark\right&gt;=(\Omega_c\left|b\right&gt;-\Omega_p\left|c\right&gt;)/\Omega$$<br>其中$\Omega=\sqrt{\Omega_p^2+\Omega_c^2}$<br>为了解共振（$\Delta_p=0$）时候演化过程，我们求出运动方程<br>$$\begin{aligned}<br>\frac{dc_a}{dt}&amp;=-\frac{i}{2}\left(c_b \Omega_p+c_c \Omega_c\right)\\<br>\frac{dc_b}{dt}&amp;=-\frac{i}{2}c_a\Omega_p^\dagger\\<br>\frac{dc_c}{dt}&amp;=-\frac{i}{2}c_a\Omega_c^\dagger\\<br>\end{aligned}$$</p>
<h2 id="With-damping"><a href="#With-damping" class="headerlink" title="With damping"></a>With damping</h2><p>带damping的运动方程为（共振情形）<br>$$\begin{aligned}<br>\frac{d\rho}{dt}=-\frac{i}{\hbar}[H,\rho]-\frac{1}{2}\{\Gamma,\rho\}<br>\end{aligned}$$</p>
<p>但是对于封闭三能级系统，此方程需要做一些修改，由于是封闭三能级系统，此时我们假设只有激发态会发生damping，所以我们取$\Gamma=\text{diag}[\gamma_1,0,0]$，原来的运动方程做如下修改<br>$$<br>\begin{aligned}<br>\frac{d\rho_{bb}}{dt}&amp;=…+\frac{\gamma_1}{2}\rho_{aa}\\<br>\frac{d\rho_{cc}}{dt}&amp;=…+\frac{\gamma_1}{2}\rho_{aa}\\<br>\end{aligned}$$<br>省略号表示原来的方程，这样就能使的密度矩阵的Trace不随时间改变了。实现代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pylab <span class="keyword">as</span> pl</div><div class="line"><span class="keyword">from</span> scipy.integrate <span class="keyword">import</span> ode</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">unif</span><span class="params">(a)</span>:</span></div><div class="line">    <span class="keyword">return</span> pl.array(a)/pl.sqrt(sum(pl.array(a)*pl.conj(a)))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ff</span><span class="params">(t,y,arg1)</span>:</span></div><div class="line">    H,Gamma=arg1</div><div class="line">    temp=y.reshape(<span class="number">3</span>,<span class="number">3</span>)</div><div class="line">    out=<span class="number">1j</span>/<span class="number">2.</span>*(pl.dot(H,temp)-pl.dot(temp,H))<span class="number">-0.5</span>*(pl.dot(Gamma,temp)+pl.dot(temp,Gamma))</div><div class="line">    <span class="comment">##closed two energy lever condition</span></div><div class="line">    <span class="comment"># out[1,1]=out[1,1]+Gamma[0,0]*temp[0,0]</span></div><div class="line"></div><div class="line">    <span class="comment">##closed three energy lever condition</span></div><div class="line">    out[<span class="number">1</span>,<span class="number">1</span>]=out[<span class="number">1</span>,<span class="number">1</span>]+Gamma[<span class="number">0</span>,<span class="number">0</span>]*temp[<span class="number">0</span>,<span class="number">0</span>]/<span class="number">2</span></div><div class="line">    out[<span class="number">2</span>,<span class="number">2</span>]=out[<span class="number">2</span>,<span class="number">2</span>]+Gamma[<span class="number">0</span>,<span class="number">0</span>]*temp[<span class="number">0</span>,<span class="number">0</span>]/<span class="number">2</span></div><div class="line">    <span class="keyword">return</span> out.reshape(<span class="number">9</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ccal</span><span class="params">(omega_p,omega_c,gamma_a,gamma_b,gamma_c,tspan,ini)</span>:</span></div><div class="line">    pl.figure()</div><div class="line">    ini=ini.reshape(<span class="number">3</span>,<span class="number">1</span>)</div><div class="line">    ini=ini.dot(ini.T)</div><div class="line">    <span class="keyword">print</span> ini</div><div class="line">    ini=ini.reshape(<span class="number">9</span>)</div><div class="line">    H=pl.zeros([<span class="number">3</span>,<span class="number">3</span>])</div><div class="line">    H[<span class="number">0</span>,<span class="number">1</span>:]=H[<span class="number">1</span>:,<span class="number">0</span>]=[-omega_p,-omega_c]</div><div class="line">    Gamma=pl.diag([gamma_a,gamma_b,gamma_c])</div><div class="line">    out=[]</div><div class="line">    dt=tspan[<span class="number">1</span>]-tspan[<span class="number">0</span>]</div><div class="line">    r=ode(ff).set_integrator(<span class="string">'zvode'</span>)</div><div class="line">    r.set_initial_value(ini,<span class="number">0</span>).set_f_params([H,Gamma])</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tspan:</div><div class="line">        r.integrate(r.t+dt)</div><div class="line">        out.append(r.y.reshape(<span class="number">3</span>,<span class="number">3</span>))</div><div class="line">    out=pl.array(out)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]:</div><div class="line">        pl.plot(tspan,abs(out[:,i,i]),label=chr(i+<span class="number">97</span>))</div><div class="line">    pl.legend()</div><div class="line"></div><div class="line"></div><div class="line">ini=unif(pl.array([<span class="number">0.</span>,<span class="number">1.</span>,<span class="number">0</span>]))</div><div class="line">ccal(<span class="number">0.1</span>,<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.</span>,<span class="number">0.0</span>,pl.linspace(<span class="number">0</span>,<span class="number">40</span>,<span class="number">5000</span>),ini)</div><div class="line">pl.show()</div></pre></td></tr></table></figure></p>
<p><img src="/img/auto_eit.png" alt="自发形成EIT"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;EIT中的绝热过程&lt;br&gt;
    
    </summary>
    
    
      <category term="Physics" scheme="https://thuxuxs.github.io/tags/Physics/"/>
    
  </entry>
  
  <entry>
    <title>郎之万方程</title>
    <link href="https://thuxuxs.github.io/2016/12/16/%E9%83%8E%E4%B9%8B%E4%B8%87%E6%96%B9%E7%A8%8B/"/>
    <id>https://thuxuxs.github.io/2016/12/16/郎之万方程/</id>
    <published>2016-12-16T20:55:03.000Z</published>
    <updated>2016-12-17T07:24:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>介绍郎之万运动及其数值模拟<br><a id="more"></a></p>
<h2 id="理论分析"><a href="#理论分析" class="headerlink" title="理论分析"></a>理论分析</h2><p>布朗粒子在液体中会受到液体分子的随机碰撞而产生随机运动，以一维粒子为例<br>$$<br>\begin{aligned}<br>m\frac{dv}{dt}&amp;=K(t)\\<br>&amp;=-\gamma_0v+F_0(t)<br>\end{aligned}<br>$$<br>其中$-\gamma_0v$是与速度相关的摩擦力，$F_0(t)$是粒子收到碰撞的随机力，其作用时间非常短，我们可以假设为一$\delta$函数形式，冲击力对所有冲击取平均值应该为零，而不同时间点的冲击力相乘应该是无关的，所以$F_0(t)$应该满足如下形式<br>$$\overline{F_0(t)}=0,\overline{F_0(t)F_0(t’)}=c\delta(t-t’)$$<br>那么我们把布朗运动简化为郎之万方程<br>$$<br>\begin{aligned}<br>&amp;\frac{dv}{dt}=-\gamma v+F(t)\\<br>&amp;\overline{F(t)}=0\\<br>&amp;\overline{F(t)F(t’)}=Q\delta(t-t’)<br>\end{aligned}$$<br>方程的形式解为<br>$$v(t)=\int_0^t\exp[-\gamma(t-\tau)]F(\tau)d\tau+v(0)\exp[-\gamma t]$$<br>考虑足够长的时间，则上式最后一项实际上为零，所以后面我们都只考虑上式右边的第一项，也即考虑足够长的时间<br>由于碰撞时随机的，显然速度的平均值应当为零，$\overline{v(t)}=0$，但这并不会给我们提供什么有用的信息，所以我们要考虑速度大小的平均值，我们计算<br>$$<br>\overline{v(t)v(t’)}<br>$$<br>显然考虑极端情况，当$t$和$t’$相隔很远的时候，他们俩的速度之间没有任何关联，所以<br>$$<br>\overline{v(t)v(t’)}=\overline{v(t)}\overline{v(t’)}=0<br>$$<br>但在一半情况下呢？我们计算<br>$$<br>\begin{aligned}<br>\overline{v(t)v(t’)}&amp;=\overline{\int_0^t\int_0^{t’}\exp[-\gamma(t-\tau)]F(\tau)d\tau\exp[-\gamma(t’-\tau’)]F(\tau’)d\tau’}\\<br>&amp;=\int_0^t\int_0^{t’}\exp[-\gamma(t-\tau)]\exp[-\gamma(t’-\tau’)]\overline{F(\tau)F(\tau’)}d\tau d\tau’\\<br>&amp;=Q\int_0^t\exp[-\gamma(t+t’)+2\gamma \tau]d\tau\\<br>&amp;=\frac{Q}{2\gamma}\left\{\exp[\gamma(t-t’)]-\exp[-\gamma(t+t’)]\right\}<br>\end{aligned}<br>$$<br>任然考虑足够长时间，所以有不同时刻的关联度为<br>$$\overline{v(t)v(t’)}=\frac{Q}{2\gamma}\exp[\gamma(t-t’)]$$<br>只与所考虑的时间差有关，且与时间差呈指数下降趋势。</p>
<h2 id="数值模拟"><a href="#数值模拟" class="headerlink" title="数值模拟"></a>数值模拟</h2><p>首先我们要进行计算的方程为<br>$$<br>\begin{aligned}<br>\frac{dv}{dt}&amp;=-\gamma v+F(t)\\<br>&amp;=-\gamma v+\sqrt{Q}N(0,1)<br>\end{aligned}$$<br>我们这里设随机力为强度为$\sqrt{Q}$的$0~1$正态分布，显然满足平均值为零，对于关联度我们有<br>$$\begin{aligned}<br>\overline{F(t)F(t’)}&amp;=Q\overline{N_t(0,1)N_{t’}(0,1)}\\<br>&amp;=Q\overline{N^2(0,1)}\delta(t-t’)\\<br>&amp;=Q\delta(t-t’)<br>\end{aligned}$$<br>我们可以解释为，当$t\neq t’$时，两个正态分布无关，那么乘积的平均等于平均的乘积即为零，当$t=t’$时，我们计算的是正态分布平方的平均值，肯定不为零。求解这个随机微分方程(SDE)我们需要用到<a href="https://zh.wikipedia.org/wiki/%E6%AC%A7%E6%8B%89-%E4%B8%B8%E5%B1%B1%E6%B3%95?oldformat=true" target="_blank" rel="external">欧拉-丸山法</a>，具体来讲是要讲方程变形为<br>$$\begin{aligned}<br>\frac{dv}{dt}&amp;=-\gamma v+F(t)\\<br>&amp;=-\gamma v+\sqrt{Q}\frac{dW(t)}{dt}\\<br>dv&amp;=-\gamma vdt+\sqrt{Q}dW(t)<br>\end{aligned}$$<br>而对于$dt$时间段内，$dW(t)$是一个<a href="https://zh.wikipedia.org/zh-hans/%E7%BB%B4%E7%BA%B3%E8%BF%87%E7%A8%8B?oldformat=true" target="_blank" rel="external">维纳过程</a>，满足$dW=W_j-W_i$服从$N(0,j-i)$的正态分布，即平均值为零，方差为$j-i$</p>
<blockquote>
<p>注意，在<code>python</code>科学计算包中，正态分布函数<code>numpy.random.normal(loc,scale)</code>中，<code>loc</code>为平均值，<code>scale</code>为<strong>标准差</strong></p>
</blockquote>
<p>所以在我们数值计算的$dt$过程中，$dW$满足的是平均数为$0$，方差为$dt$（标准差为$\sqrt{dt}$）的正态分布。所以我们利用差分的方法可以计算得到<br>$$v_{i+1}=-\gamma v_i dt+\sqrt{Q}N(0,dt)+v_i$$<br>有了这个递推公式，代码就很简单了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> scipy.integrate <span class="keyword">import</span> ode</div><div class="line"></div><div class="line">n=<span class="number">6000</span> <span class="comment">#total steps</span></div><div class="line">t=linspace(<span class="number">0</span>,<span class="number">80</span>,n) <span class="comment">#total time</span></div><div class="line">ini=<span class="number">0.</span> <span class="comment">#initial velocity</span></div><div class="line">gamma=<span class="number">10.</span> <span class="comment">#decay rate</span></div><div class="line">Q=<span class="number">8.</span> <span class="comment">#square of force</span></div><div class="line">dt=t[<span class="number">1</span>]-t[<span class="number">0</span>] <span class="comment">#time distance</span></div><div class="line">v=[ini] <span class="comment"># velocity list</span></div><div class="line"></div><div class="line"><span class="comment">#Be careful of normal(loc,scale), scale is Standard Deviation,</span></div><div class="line"><span class="comment">#so we use sqrt(dt) here</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(t)<span class="number">-1</span>):</div><div class="line">    v.append(-gamma*v[<span class="number">-1</span>]*dt+sqrt(Q)*np.random.normal(<span class="number">0</span>,sqrt(dt))+v[<span class="number">-1</span>])</div><div class="line">subplot(<span class="number">311</span>)</div><div class="line">plot(t,v)</div><div class="line">title(<span class="string">'velocity'</span>)</div><div class="line"></div><div class="line"><span class="comment">#here we chose a window, which is a peice of data,</span></div><div class="line"><span class="comment">#to calculate the mean value of velocity and square of velocity</span></div><div class="line">window_width=int(n/<span class="number">10</span>)</div><div class="line"><span class="comment">#mean value of velocity</span></div><div class="line">subplot(<span class="number">312</span>)</div><div class="line">plot([mean(v[i:i+window_width<span class="number">-1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(n-window_width)])</div><div class="line">title(<span class="string">'mean of velocity'</span>)</div><div class="line"></div><div class="line"><span class="comment">#mean value of square of velocity</span></div><div class="line">subplot(<span class="number">313</span>)</div><div class="line">plot([mean(np.power(v[i:i+window_width<span class="number">-1</span>],<span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(n-window_width)])</div><div class="line">title(<span class="string">'mean of velocity square, should be around '</span>+str(Q/<span class="number">2.</span>/gamma))</div><div class="line">show()</div></pre></td></tr></table></figure></p>
<p><img src="/img/rand_walk.png" alt="rand_walk"></p>
<blockquote>
<p><a href="https://pypi.python.org/pypi/sdeint" target="_blank" rel="external"><code>python</code>有用来计算SED的包</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍郎之万运动及其数值模拟&lt;br&gt;
    
    </summary>
    
    
      <category term="Physics" scheme="https://thuxuxs.github.io/tags/Physics/"/>
    
  </entry>
  
  <entry>
    <title>两个光学模式与一个力学模式的耦合</title>
    <link href="https://thuxuxs.github.io/2016/12/10/%E4%B8%A4%E4%B8%AA%E5%85%89%E5%AD%A6%E6%A8%A1%E5%BC%8F%E4%B8%8E%E4%B8%80%E4%B8%AA%E5%8A%9B%E5%AD%A6%E6%A8%A1%E5%BC%8F%E7%9A%84%E8%80%A6%E5%90%88/"/>
    <id>https://thuxuxs.github.io/2016/12/10/两个光学模式与一个力学模式的耦合/</id>
    <published>2016-12-10T21:32:46.000Z</published>
    <updated>2017-04-14T22:09:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章将介绍微腔系统中的两个光学模式和同一个布里渊力学模式之间的耦合<br><a id="more"></a></p>
<h1 id="基本方程"><a href="#基本方程" class="headerlink" title="基本方程"></a>基本方程</h1><p><img src="/img/t2o.svg" alt="基本示意图"><br>$$<br>\begin{aligned}<br>H&amp;=\hbar\omega_1 a^\dagger_1 a_1+\hbar\omega_2 a^\dagger_2 a_2+\hbar\Omega_m b^\dagger b+\hbar g(a^\dagger_1 b^\dagger a_2+a_1 b a^\dagger_2)\\<br>&amp;+i\hbar\sqrt{\kappa_{ex,1}}s_{in,1}(a^\dagger_1 e^{-i\omega_{c1} t}-a_1 e^{i\omega_{c1} t})\\<br>&amp;+i\hbar\sqrt{\kappa_{ex,2}}s_{in,2}(a^\dagger_2 e^{-i\omega_{c2} t}-a_2 e^{i\omega_{c2} t})<br>\end{aligned}<br>$$<br>采取变换$U=\exp{(i\omega_{c1}a_1^\dagger a_1 t+i\omega_{c2}a_2^\dagger a_2 t+i(\omega_{c2}-\omega_{c1})b^\dagger b t})$<br>最后得到的新哈密顿量为<br>$$\begin{aligned}<br>H&amp;=-\hbar\Delta_1a_1^\dagger a_1-\hbar \Delta_2 a_2^\dagger a_2-\hbar (\omega_{c2}-\omega_{c1}-\Omega_m)b^\dagger b\\<br>&amp;+\hbar g(a_1^\dagger b^\dagger a_2+a_1 b a_2^\dagger)\\<br>&amp;+i\hbar\sqrt{\kappa_{ex,1}}s_{in,1}(a_1^\dagger-a_1)\\<br>&amp;+i\hbar \sqrt{\kappa_{ex,2}}s_{in,2}(a_2^\dagger-a_2)<br>\end{aligned}$$<br>设$\Delta_1=\omega_{c1}-\omega_1,\Delta_2=\omega_{c2}-\omega_2,\Delta_m=\omega_{c2}-\omega_{c1}-\Omega_m$</p>
<p>代入运动学方程<br>$$<br>\begin{aligned}<br>\frac{da_1}{dt}&amp;=(i\Delta_1-\kappa_1/2) a_1-igb^\dagger a_2+\sqrt{\kappa_{ex,1}}s_{in,1}\\<br>\frac{da_2}{dt}&amp;=(i\Delta_2-\kappa_2/2) a_2-iga_1 b+\sqrt{\kappa_{ex,2}}s_{in,2}\\<br>\frac{db}{dt}&amp;=(i\Delta_m -\Gamma_m)b-iga_1^\dagger a_2\\<br>\end{aligned}$$<br>将变量分成实部和虚部，得到<br>$$<br>\begin{aligned}<br>\frac{da_1^R}{dt}&amp;=-\Delta_1 a_1^I-\kappa_1 a_1^R/2+g(b^R a_2^I-b^I a_2^R)+\sqrt{\kappa_{ex,1}}s_{in,1}\\<br>\frac{da_1^I}{dt}&amp;=\Delta_1a_1^R -\kappa_1a_1^I/2-g(b^Ra_2^R+b^Ia_2^I)\\<br>\frac{da_2^R}{dt}&amp;=-\Delta_2a_2^I-\kappa_2a_2^R/2+g(a_1^Rb^I+a_1^Ib^R)+\sqrt{\kappa_{ex,2}}s_{in,2}\\<br>\frac{da_2^I}{dt}&amp;=\Delta_2a_2^R-\kappa_2a_2^I/2-g(a_1^Rb^R-a_1^Ib^I)\\<br>\frac{db^R}{dt}&amp;=-\Delta_mb^I-\Gamma_mb^R+g(a_1^Ra_2^I-a_1^Ia_2^R)\\<br>\frac{db^I}{dt}&amp;=\Delta_mb^R-\Gamma_mb^I-g(a_1^Ra_2^R+a_1^Ia_2^I)\\<br>\end{aligned}<br>$$</p>
<h1 id="考虑透射谱"><a href="#考虑透射谱" class="headerlink" title="考虑透射谱"></a>考虑透射谱</h1><h2 id="a-1-的透射谱"><a href="#a-1-的透射谱" class="headerlink" title="$a_1$的透射谱"></a>$a_1$的透射谱</h2><p>我们有输入输出关系$s_{out,1}=s_{in,1}-\sqrt{\kappa_{ex,1}}a_1$，由于我们要模拟脉冲输入的情况，所以输入会出现零的情况，那么我们就不直接计算透射系数，而计算$s_{out,1}$,于是，我们将前面的运动方程进行一定的变形<br>$$<br>\begin{aligned}<br>\frac{dA_1}{dT}&amp;=(i\bar\Delta_1-\kappa_1’/2)A_1-iGB^\dagger A_2/r+s_{in,1}\\<br>\frac{dA_2}{dT}&amp;=(i\bar\Delta_2-\kappa_2’/2)A_2-iGBA_1 r+r^2 s_{in,2}\\<br>\frac{dB}{dT}&amp;=(i\bar\Delta_m-\Gamma_m’)B-iGA_1^\dagger A_2/r<br>\end{aligned}$$<br>其中<br>$$\begin{aligned}<br>T&amp;=\kappa_{ex,1}t,&amp;r=\sqrt{\frac{\kappa_{ex,2}}{\kappa_{ex,1}}},\quad &amp;G=g/\kappa_{ex,1}^{3/2}\\<br>A_1&amp;=\sqrt{\kappa_{ex,1}}a_1,&amp;A_2=\sqrt{\kappa_{ex,2}}a_2,\quad &amp;B=\sqrt{\kappa_{ex,1}}b\\<br>\bar\Delta_1&amp;=\Delta_1/\kappa_{ex,1},&amp;\bar\Delta_2=\Delta_2/\kappa_{ex,1},\quad &amp;\bar\Delta_m=\Delta_m/\kappa_{ex,1}\\<br>\kappa_1’&amp;=\kappa_1/\kappa_{ex,1},&amp;\kappa_2’=\kappa_2/\kappa_{ex,1},\quad &amp;\Gamma_m’=\Gamma_m/\kappa_{ex,1}<br>\end{aligned}$$</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> scipy.integrate <span class="keyword">import</span> ode</div><div class="line"><span class="keyword">from</span> manipulate <span class="keyword">import</span> mplot</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gaussian</span><span class="params">(x,mu,sig)</span>:</span></div><div class="line">    <span class="comment"># try:</span></div><div class="line">    <span class="comment">#     temp=copy(x)</span></div><div class="line">    <span class="comment">#     temp[temp&gt;mu]=mu</span></div><div class="line">    <span class="comment">#     return np.exp(-np.power(temp-mu,2.)/(2*np.power(sig,2.)))</span></div><div class="line">    <span class="comment"># except:</span></div><div class="line">    <span class="comment">#     if x&gt;=mu:</span></div><div class="line">    <span class="comment">#         return 1</span></div><div class="line">    <span class="comment">#     else:</span></div><div class="line">    <span class="comment">#         return np.exp(-np.power(x-mu,2.)/(2*np.power(sig,2.)))</span></div><div class="line">    <span class="keyword">return</span> np.exp(-np.power(x-mu,<span class="number">2.</span>)/(<span class="number">2</span>*np.power(sig,<span class="number">2.</span>)))</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(t,y,arg)</span>:</span></div><div class="line">    d1,d2,dm,k1,k2,gm,g,r,s1,s2,mu1,sig1,mu2,sig2=arg</div><div class="line">    s1=s1*gaussian(t,mu1,sig1)</div><div class="line">    s2=s2*gaussian(t,mu2,sig2)</div><div class="line">    <span class="keyword">return</span> [(<span class="number">1.0j</span>*d1-k1/<span class="number">2</span>)*y[<span class="number">0</span>]<span class="number">-1.0j</span>*g*conj(y[<span class="number">2</span>])*y[<span class="number">1</span>]/r+s1,</div><div class="line">            (<span class="number">1.0j</span>*d2-k2/<span class="number">2</span>)*y[<span class="number">1</span>]<span class="number">-1.0j</span>*g*y[<span class="number">2</span>]*y[<span class="number">0</span>]*r+r**<span class="number">2</span>*s2,</div><div class="line">            (<span class="number">1.0j</span>*dm-gm)*y[<span class="number">2</span>]<span class="number">-1.0j</span>*g*conj(y[<span class="number">0</span>])*y[<span class="number">1</span>]/r]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">jac</span><span class="params">(t,y,arg)</span>:</span></div><div class="line">    d1,d2,dm,k1,k2,gm,g,r,s1,s2=arg</div><div class="line">    <span class="keyword">return</span> [[<span class="number">1.0j</span>*d1-k1/<span class="number">2</span>,<span class="number">-1.0j</span>*g*conj(y[<span class="number">2</span>])/r,<span class="number">-1.0j</span>*g*y[<span class="number">1</span>]/r],</div><div class="line">            [<span class="number">-1.0j</span>*g*y[<span class="number">2</span>]*r,<span class="number">1.0j</span>*d2-k2/<span class="number">2</span>,<span class="number">-1.0j</span>*g*y[<span class="number">0</span>]*r],</div><div class="line">            [<span class="number">-1.0j</span>*g*y[<span class="number">1</span>]/r,<span class="number">-1.0j</span>*g*conj(y[<span class="number">0</span>])/r],<span class="number">1.0j</span>*dm-gm]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_domain</span><span class="params">(t,dd=<span class="number">0</span>,d1=<span class="number">0</span>,k1=<span class="number">2</span>,gm=<span class="number">10</span>,g=<span class="number">1</span>,r=<span class="number">1</span>,s1=<span class="number">2.2</span>,s2=<span class="number">0.5</span>,mu1=<span class="number">2.5</span>,sig1=<span class="number">1</span>,mu2=<span class="number">4</span>,sig2=<span class="number">1.6</span>)</span>:</span></div><div class="line">    para=[d1,dd,dd,k1,k1,gm,g,r,s1,s2,mu1,sig1,mu2,sig2]</div><div class="line">    tran=ode(fun).set_integrator(<span class="string">'zvode'</span>)</div><div class="line">    y0,t0=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],<span class="number">0</span></div><div class="line">    tran.set_initial_value(y0,t0).set_f_params(para)</div><div class="line">    out=[]</div><div class="line">    dt=t[<span class="number">1</span>]-t[<span class="number">0</span>]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> t:</div><div class="line">        tran.integrate(tran.t+dt)</div><div class="line">        out.append(tran.y)</div><div class="line">    out=array(out)</div><div class="line">    s=ones(out.shape)</div><div class="line">    s[:,<span class="number">0</span>]=s1*gaussian(t,mu1,sig1)</div><div class="line">    s[:,<span class="number">1</span>]=s2*gaussian(t,mu2,sig2)</div><div class="line">    <span class="comment"># s[t&lt;t_stop,1]=s2</span></div><div class="line">    ou=zeros([len(t),<span class="number">4</span>])</div><div class="line">    ou[:,<span class="number">0</span>:<span class="number">2</span>]=(abs(s-out)**<span class="number">2</span>)[:,<span class="number">0</span>:<span class="number">2</span>]</div><div class="line">    ou[:,<span class="number">2</span>:]=s[:,<span class="number">0</span>:<span class="number">2</span>]</div><div class="line">    <span class="keyword">return</span> ou</div><div class="line">mplot(time_domain,linspace(<span class="number">0</span>,<span class="number">20</span>,<span class="number">400</span>),dd=(<span class="number">-75</span>,<span class="number">75</span>),gm=(<span class="number">0.1</span>,<span class="number">10</span>),g=(<span class="number">0.1</span>,<span class="number">10</span>),s1=(<span class="number">0</span>,<span class="number">5</span>),s2=(<span class="number">0</span>,<span class="number">5</span>),mu1=(<span class="number">1</span>,<span class="number">15</span>),mu2=(<span class="number">1</span>,<span class="number">15</span>))</div><div class="line">show()</div></pre></td></tr></table></figure>
<p><a href="https://github.com/thuxuxs/thuxuxs.github.io/blob/master/manipulate.py" target="_blank" rel="external">manipulate.py文件</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章将介绍微腔系统中的两个光学模式和同一个布里渊力学模式之间的耦合&lt;br&gt;
    
    </summary>
    
    
      <category term="Physics" scheme="https://thuxuxs.github.io/tags/Physics/"/>
    
  </entry>
  
  <entry>
    <title>双腔耦合</title>
    <link href="https://thuxuxs.github.io/2016/12/09/%E5%8F%8C%E8%85%94%E8%80%A6%E5%90%88/"/>
    <id>https://thuxuxs.github.io/2016/12/09/双腔耦合/</id>
    <published>2016-12-09T17:37:21.000Z</published>
    <updated>2017-09-29T22:17:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里是两个腔相互耦合，其中一个腔与锥型光纤耦合<br><a id="more"></a></p>
<h1 id="双腔耦合"><a href="#双腔耦合" class="headerlink" title="双腔耦合"></a>双腔耦合</h1><p>$$<br>\begin{aligned}H&amp;=\hbar \omega_1a_1^\dagger a_1+\hbar \omega_2 a^\dagger_2 a_2+\hbar g(a_1^\dagger a_2 +a_1 a_2^\dagger)\\<br>&amp;+i\hbar \sqrt{\kappa_{1,ex}}s_{in}(a_1^\dagger e^{-i\omega_l t}-a_1 e^{i\omega_l t})<br>\end{aligned}$$<br>选择变换$U=\exp(i\omega_l a_1^\dagger a t+i\omega_l a_2^\dagger a_2 t)$<br>得到新哈密顿量为<br>$$\begin{aligned}H&amp;=-\hbar \Delta_1 a_1^\dagger a_1-\hbar \Delta_2 a^\dagger_2 a_2+\hbar g(a_1^\dagger a_2+a_1 a_2^\dagger)\\&amp;+i\hbar \sqrt{\kappa_{ex,1}}s_{in}(a_1^\dagger-a_1)\end{aligned}$$<br>其中$\Delta_1=\omega_l-\omega_1,\Delta_2=\omega_l-\omega_2$，写出运动方程<br>$$<br>\begin{aligned}<br>\frac{da_1}{dt}&amp;=i\Delta_1a_1-\frac{\kappa_1}{2}a_1-iga_2+\sqrt{\kappa_{ex,1}}s_{in}\\<br>\frac{da_2}{dt}&amp;=i\Delta_2 a_2-\frac{\kappa_2}{2}a_2-iga_1<br>\end{aligned}<br>$$<br>在稳态下即个导数为零的时候求解方程，得到<br>$$<br>\begin{aligned}<br>&amp;\left(\Delta_1+i\frac{\kappa_1}{2}\right)a_1-ga_2=i\sqrt{\kappa_{ex,1}}s_{in}\\<br>&amp;\left(\Delta_2+i\frac{\kappa_2}{2}\right)a_2-ga_1=0<br>\end{aligned}$$<br>解得<br>$$<br>a_1=\frac{2is_{in}\sqrt{\kappa_{ex,1}}}{(2\Delta_1+i\kappa_1)-\frac{4g^2}{2\Delta_2+i\kappa_2}}<br>$$<br>计算输出谱<br>$$<br>\begin{aligned}<br>t&amp;=\frac{s_{out}}{s_{in}}\\<br>&amp;=\frac{s_{in}-\sqrt{\kappa_{ex,1}}a_1}{s_{in}}\\<br>&amp;=1-\frac{2i\kappa_{ex,1}}{(2\Delta_1+i\kappa_1)-\frac{4g^2}{2\Delta_2+i\kappa_2}}\\<br>&amp;=1-\frac{1}{(\frac{\kappa_1}{2\kappa_{ex,1}}-i\frac{\Delta_1}{\kappa_{ex,1}})+\frac{g^2/\kappa_{ex,1}^2}{\frac{\kappa_2}{2\kappa_{ex,1}}-i\frac{\Delta_2}{\kappa_{ex,1}}}}<br>\end{aligned}<br>$$</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里是两个腔相互耦合，其中一个腔与锥型光纤耦合&lt;br&gt;
    
    </summary>
    
    
      <category term="Physics" scheme="https://thuxuxs.github.io/tags/Physics/"/>
    
  </entry>
  
  <entry>
    <title>理解Python中的with...as...语法[转载]</title>
    <link href="https://thuxuxs.github.io/2016/12/07/%E7%90%86%E8%A7%A3Python%E4%B8%AD%E7%9A%84with-as-%E8%AF%AD%E6%B3%95-%E8%BD%AC%E8%BD%BD/"/>
    <id>https://thuxuxs.github.io/2016/12/07/理解Python中的with-as-语法-转载/</id>
    <published>2016-12-08T06:57:10.000Z</published>
    <updated>2016-12-08T07:08:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文转载自<a href="http://zhoutall.com/archives/325" target="_blank" rel="external">http://zhoutall.com/archives/325</a><br><a id="more"></a></p>
<p>使用语言的好特性，而不是那些糟糕的特性————不知道谁说的</p>
<p>好久不学习 python 的语法了，上次去面试，和面试官聊到了 python 中的 with-as statement（也称 context manager），挺感兴趣的，这两天学习了一番，收获颇丰在此分享。</p>
<p>先说明一个常见问题，文件打开：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    f = open(<span class="string">'xxx'</span>)</div><div class="line">    do something</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    do something</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    f.close()</div></pre></td></tr></table></figure></p>
<p>其实我个人不止一次在网上看到有这么写的了，这个是错的。<br>首先正确的如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    f = open(<span class="string">'xxx'</span>)</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'fail to open'</span></div><div class="line">    exit(<span class="number">-1</span>)</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    do something</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    do something</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    f.close()</div></pre></td></tr></table></figure></p>
<p>很麻烦不是么，但正确的方法就是这么写。<br>我们为什么要写 finally，是因为防止程序抛出异常最后不能关闭文件，但是需要关闭文件有一个前提就是文件已经打开了。<br>在第一段错误代码中，如果异常发生在 f=open(‘xxx’) 的时候，比如文件不存在，立马就可以知道执行 f.close() 是没有意义的。改正后的解决方案就是第二段代码。</p>
<p>好了言归正转，开始讨论 with 语法。</p>
<p>首先我们从下面这个问题谈起，try-finally 的语法结构：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">set things up</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    do something</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    tear things down</div></pre></td></tr></table></figure></p>
<p>这东西是个常见结构，比如文件打开，set things up就表示f=open(‘xxx’)，tear things down就表示f.close()。在比如像多线程锁，资源请求，最终都有一个释放的需求。Try…finally 结构保证了 tear things down 这一段永远都会执行，即使上面 do something 得工作没有完全执行。</p>
<p>如果经常用这种结构，我们首先可以采取一个较为优雅的办法，封装！<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">controlled_execution</span><span class="params">(callback)</span>:</span></div><div class="line">    set things up</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        callback(thing)</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        tear things down</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_function</span><span class="params">(thing)</span>:</span></div><div class="line">    do something</div><div class="line"></div><div class="line">controlled_execution(my_function)</div></pre></td></tr></table></figure></p>
<p>封装是一个支持代码重用的好办法，但是这个办法很 dirty，特别是当 do something 中有修改一些 local variables 的时候（变成函数调用，少不了带来变量作用域上的麻烦）。</p>
<p>另一个办法是使用生成器，但是只需要生成一次数据，我们用 for-in 结构去调用他：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">controlled_execution</span><span class="params">()</span>:</span></div><div class="line">    set things up</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">yield</span> thing</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        tear things down</div><div class="line"></div><div class="line"><span class="keyword">for</span> thing <span class="keyword">in</span> controlled_execution():</div><div class="line">    do something <span class="keyword">with</span> thing</div></pre></td></tr></table></figure></p>
<p>因为 thing 只有一个，所以 yield 语句只需要执行一次。当然，从代码可读性也就是优雅的角度来说这简直是糟糕透了。我们在确定 for 循环只执行一次的情况下依然使用了 for 循环，这代码给不知道的人看一定很难理解这里的循环是什么个道理。</p>
<p>最终的 python-dev 团队的解决方案。（python 2.5 以后增加了 with 表达式的语法）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">controlled_execution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></div><div class="line">        set things up</div><div class="line">        <span class="keyword">return</span> thing</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, type, value, traceback)</span>:</span></div><div class="line">        tear things down</div><div class="line"></div><div class="line"><span class="keyword">with</span> controlled_execution() <span class="keyword">as</span> thing:</div><div class="line">        do something</div></pre></td></tr></table></figure></p>
<p>在这里，python 使用了 with-as 的语法。当 python 执行这一句时，会调用__enter__函数，然后把该函数 return 的值传给 as 后指定的变量。之后，python 会执行下面 do something 的语句块。最后不论在该语句块出现了什么异常，都会在离开时执行__exit__。<br>另外，__exit__除了用于 tear things down，还可以进行异常的监控和处理，注意后几个参数。要跳过一个异常，只需要返回该函数 True 即可。下面的样例代码跳过了所有的 TypeError，而让其他异常正常抛出。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, type, value, traceback)</span>:</span></div><div class="line">    <span class="keyword">return</span> isinstance(value, TypeError)</div></pre></td></tr></table></figure></p>
<p>在 python2.5 及以后，file 对象已经写好了__enter__和__exit__函数，我们可以这样测试：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">"x.txt"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f</div><div class="line">&lt;open file <span class="string">'x.txt'</span>, mode <span class="string">'r'</span> at <span class="number">0x00AE82F0</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.__enter__()</div><div class="line">&lt;open file <span class="string">'x.txt'</span>, mode <span class="string">'r'</span> at <span class="number">0x00AE82F0</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.read(<span class="number">1</span>)</div><div class="line"><span class="string">'X'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.__exit__(<span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>f.read(<span class="number">1</span>)</div><div class="line">Traceback (most recent call last):</div><div class="line">    File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">ValueError: I/O operation on closed file</div></pre></td></tr></table></figure></p>
<p>之后，我们如果要打开文件并保证最后关闭他，只需要这么做：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">"x.txt"</span>) <span class="keyword">as</span> f:</div><div class="line">    data = f.read()</div><div class="line">    do something <span class="keyword">with</span> data</div></pre></td></tr></table></figure></p>
<p>如果有多个项，我们可以这么写：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">"x.txt"</span>) <span class="keyword">as</span> f1, open(<span class="string">'xxx.txt'</span>) <span class="keyword">as</span> f2:</div><div class="line">    do something <span class="keyword">with</span> f1,f2</div></pre></td></tr></table></figure></p>
<p>上文说了__exit__函数可以进行部分异常的处理，如果我们不在这个函数中处理异常，他会正常抛出，这时候我们可以这样写（python 2.7 及以上版本，之前的版本参考使用 contextlib.nested 这个库函数）：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">with</span> open( <span class="string">"a.txt"</span> ) <span class="keyword">as</span> f :</div><div class="line">        do something</div><div class="line"><span class="keyword">except</span> xxxError:</div><div class="line">    do something about exception</div></pre></td></tr></table></figure></p>
<p>总之，with-as 表达式极大的简化了每次写 finally 的工作，这对保持代码的优雅性是有极大帮助的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文转载自&lt;a href=&quot;http://zhoutall.com/archives/325&quot;&gt;http://zhoutall.com/archives/325&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://thuxuxs.github.io/tags/Python/"/>
    
      <category term="zz" scheme="https://thuxuxs.github.io/tags/zz/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning算法</title>
    <link href="https://thuxuxs.github.io/2016/12/05/Machine-Learning%E7%AE%97%E6%B3%95/"/>
    <id>https://thuxuxs.github.io/2016/12/05/Machine-Learning算法/</id>
    <published>2016-12-06T06:57:45.000Z</published>
    <updated>2016-12-15T18:31:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里做个总结，对每个算法单独写<br><a id="more"></a></p>
<ul>
<li>线性回归</li>
<li>逻辑回归</li>
<li>决策树</li>
<li>支持向量机</li>
<li>朴素贝叶斯</li>
<li>KNN算法</li>
<li>K平均数算法</li>
<li>随机森林</li>
<li>将维算法</li>
<li>Adaboost算法</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里做个总结，对每个算法单独写&lt;br&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="https://thuxuxs.github.io/tags/Machine-Learning/"/>
    
  </entry>
  
</feed>
